"""
Scores Module - Clinical Scoring Systems
Main Router - Organized by Specialty

Imports calculators from individual specialty modules
"""

import streamlit as st
import sys
from pathlib import Path

# Add parent directory to path to import scores module
sys.path.insert(0, str(Path(__file__).parent.parent))

from scores.config import SCORES_BY_SPECIALTY
from scores import cardiology, emergency, respiratory, neurology, gi, metabolism, hematology, nephrology, trauma, psychiatry, oncology

st.set_page_config(page_title="Scores - Clinical Assistant", page_icon="üìä", layout="wide")

# ========== HEADER ==========
st.title("üìä Thang ƒêi·ªÉm L√¢m S√†ng")
st.markdown("Calculators ph√¢n lo·∫°i theo chuy√™n khoa")
st.markdown("---")

# ========== SIDEBAR ==========
with st.sidebar:
    st.header("Ch·ªçn Chuy√™n Khoa")
    
    specialty = st.selectbox(
        "Chuy√™n khoa:",
        list(SCORES_BY_SPECIALTY.keys()),
        index=0  # Default: Emergency & Critical Care
    )
    
    st.markdown("---")
    
    st.subheader("Thang ƒêi·ªÉm C√≥ S·∫µn")
    
    # Display scores for selected specialty
    scores_in_specialty = SCORES_BY_SPECIALTY[specialty]
    
    score_options = []
    for score_id, score_info in scores_in_specialty.items():
        score_options.append(f"{score_info['status']} {score_info['name']}")
    
    selected_score_display = st.radio(
        "Calculator:",
        score_options,
        label_visibility="collapsed"
    )
    
    # Extract score_id from selection
    selected_score_id = None
    for score_id, score_info in scores_in_specialty.items():
        if score_info['name'] in selected_score_display:
            selected_score_id = score_id
            break
    
    st.markdown("---")
    st.info("""
    **Ch√∫ th√≠ch:**
    - ‚úÖ Ho√†n th√†nh
    - üöß ƒêang ph√°t tri·ªÉn
    - üìã K·∫ø ho·∫°ch
    """)
    
    st.markdown("---")
    st.caption(f"**{len([s for specialty_scores in SCORES_BY_SPECIALTY.values() for s in specialty_scores])}** calculators")
    st.caption("**Evidence-based**")

# ========== MAIN CONTENT ==========

# Display specialty overview
st.info(f"""
**Chuy√™n khoa:** {specialty}

**S·ªë l∆∞·ª£ng calculators:** {len(scores_in_specialty)}

**ƒêang xem:** {SCORES_BY_SPECIALTY[specialty][selected_score_id]['name'] if selected_score_id else 'Ch·ªçn calculator b√™n tr√°i'}
""")

# ========== ROUTE TO APPROPRIATE MODULE ==========

# Emergency & Critical Care
if "C·∫•p C·ª©u" in specialty:
    emergency.render_emergency_calculator(selected_score_id)

# Cardiology
elif "Tim M·∫°ch" in specialty:
    cardiology.render_cardiology_calculator(selected_score_id)

# Respiratory
elif "H√¥ H·∫•p" in specialty:
    respiratory.render_respiratory_calculator(selected_score_id)

# Neurology
elif "Th·∫ßn Kinh" in specialty:
    neurology.render_neurology_calculator(selected_score_id)

# GI/Hepatology
elif "Ti√™u H√≥a" in specialty or "Gan" in specialty:
    gi.render_gi_calculator(selected_score_id)

# Metabolism/Endocrinology
elif "N·ªôi Ti·∫øt" in specialty or "Chuy·ªÉn H√≥a" in specialty:
    metabolism.render_metabolism_calculator(selected_score_id)

# Hematology
elif "Huy·∫øt H·ªçc" in specialty or "ƒê√¥ng M√°u" in specialty:
    hematology.render_hematology_calculator(selected_score_id)

# Nephrology
elif "Th·∫≠n" in specialty or "ƒêi·ªán Gi·∫£i" in specialty:
    nephrology.render_nephrology_calculator(selected_score_id)

# Trauma
elif "Ch·∫•n Th∆∞∆°ng" in specialty or "Ch·ªânh H√¨nh" in specialty:
    trauma.render_trauma_calculator(selected_score_id)

# Psychiatry
elif "T√¢m Th·∫ßn" in specialty or "T√¢m L√Ω" in specialty:
    psychiatry.render_psychiatry_calculator(selected_score_id)

# Oncology
elif "Ung Th∆∞" in specialty:
    oncology.render_oncology_calculator(selected_score_id)

# Other specialties - show placeholder for now
else:
    score_info = scores_in_specialty[selected_score_id]
    st.subheader(f"üìã {score_info['name']}")
    st.caption(score_info['desc'])
    
    if score_info['status'] == "‚úÖ":
        st.success("‚úÖ ƒê√£ ho√†n th√†nh - ƒêang trong module ri√™ng")
    elif score_info['status'] == "üöß":
        st.warning("üöß ƒêang ph√°t tri·ªÉn - S·∫Øp ra m·∫Øt")
    else:
        st.info("üìã Trong k·∫ø ho·∫°ch ph√°t tri·ªÉn")
    
    st.markdown("---")
    st.markdown(f"""
    **M√¥ t·∫£:** {score_info['desc']}
    
    Calculator n√†y s·∫Ω s·ªõm ƒë∆∞·ª£c tri·ªÉn khai trong module chuy√™n khoa t∆∞∆°ng ·ª©ng.
    """)

# ========== FOOTER ==========
st.markdown("---")
st.caption("üìö All scores based on international guidelines and peer-reviewed literature")
st.caption("‚ö†Ô∏è For reference only - Always use clinical judgment")
st.caption("üóÇÔ∏è Modular architecture for easy maintenance and expansion")
