"""
Module Tim M·∫°ch - Thang ƒêi·ªÉm & C√¥ng C·ª• L√¢m S√†ng
"""

import streamlit as st
import pandas as pd
import numpy as np

st.set_page_config(page_title="Tim M·∫°ch - Clinical Assistant", page_icon="‚ù§Ô∏è", layout="wide")

# ========== HEADER ==========
st.title("‚ù§Ô∏è Tim M·∫°ch - Thang ƒêi·ªÉm L√¢m S√†ng")
st.markdown("C√°c c√¥ng c·ª• ƒë√°nh gi√° nguy c∆° v√† ti√™n l∆∞·ª£ng tim m·∫°ch")
st.markdown("---")

# ========== SIDEBAR ==========
with st.sidebar:
    st.header("‚öôÔ∏è Ch·ªçn Thang ƒêi·ªÉm")
    
    score_type = st.selectbox(
        "Calculator:",
        [
            "CHA‚ÇÇDS‚ÇÇ-VASc - Nguy C∆° ƒê·ªôt Qu·ªµ (Rung Nhƒ©)",
            "HAS-BLED - Nguy C∆° Ch·∫£y M√°u",
            "SCORE2 - Nguy C∆° Tim M·∫°ch 10 NƒÉm (40-69 tu·ªïi)",
            "SCORE2-OP - Nguy C∆° Tim M·∫°ch (‚â•70 tu·ªïi)",
            "HEART Score - ƒêau Ng·ª±c C·∫•p",
            "TIMI Risk Score - ACS",
            "GRACE Score - Ti√™n L∆∞·ª£ng ACS",
            "Framingham Risk Score - Nguy C∆° Tim M·∫°ch 10 NƒÉm"
        ]
    )
    
    st.markdown("---")
    st.info("""
    **üìö CƒÉn c·ª© khoa h·ªçc:**
    - ESC Guidelines 2020/2024
    - AHA/ACC Guidelines
    - Evidence-based scoring systems
    """)

# ========== MAIN CONTENT ==========

# ===== CHA2DS2-VASc =====
if "CHA‚ÇÇDS‚ÇÇ-VASc" in score_type:
    st.subheader("‚ù§Ô∏è CHA‚ÇÇDS‚ÇÇ-VASc Score")
    st.caption("ƒê√°nh Gi√° Nguy C∆° ƒê·ªôt Qu·ªµ Trong Rung Nhƒ©")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìã Ti√™u Ch√≠ ƒê√°nh Gi√°")
        
        # C - CHF
        chf = st.checkbox(
            "**C** - Suy tim sung huy·∫øt / R·ªëi lo·∫°n ch·ª©c nƒÉng th·∫•t tr√°i",
            help="Ti·ªÅn s·ª≠ suy tim ho·∫∑c EF <40%"
        )
        
        # H - Hypertension
        htn = st.checkbox(
            "**H** - TƒÉng huy·∫øt √°p",
            help="ƒêang ƒëi·ªÅu tr·ªã tƒÉng huy·∫øt √°p ho·∫∑c BP >140/90 mmHg"
        )
        
        # A2 - Age
        age_group = st.radio(
            "**A** - Tu·ªïi",
            ["< 65 tu·ªïi", "65-74 tu·ªïi", "‚â• 75 tu·ªïi"],
            horizontal=True
        )
        
        # D - Diabetes
        dm = st.checkbox(
            "**D** - ƒê√°i th√°o ƒë∆∞·ªùng",
            help="ƒêang ƒëi·ªÅu tr·ªã ho·∫∑c HbA1c ‚â•6.5%"
        )
        
        # S2 - Stroke/TIA
        stroke = st.checkbox(
            "**S** - Ti·ªÅn s·ª≠ ƒê·ªôt qu·ªµ / TIA / Huy·∫øt kh·ªëi",
            help="ƒê·ªôt qu·ªµ, TIA ho·∫∑c t·∫Øc m·∫°ch h·ªá th·ªëng tr∆∞·ªõc ƒë√¢y"
        )
        
        # V - Vascular disease
        vasc = st.checkbox(
            "**V** - B·ªánh m·∫°ch m√°u",
            help="Nh·ªìi m√°u c∆° tim, b·ªánh ƒë·ªông m·∫°ch ngo·∫°i bi√™n, plaque ƒë·ªông m·∫°ch ch·ªß"
        )
        
        # Sc - Sex category
        sex = st.radio(
            "**Sc** - Gi·ªõi t√≠nh",
            ["Nam", "N·ªØ"],
            horizontal=True
        )
        
        if st.button("üßÆ T√≠nh ƒêi·ªÉm", type="primary"):
            # Calculate score
            score = 0
            details = []
            
            if chf:
                score += 1
                details.append("‚úì Suy tim (+1)")
            
            if htn:
                score += 1
                details.append("‚úì TƒÉng huy·∫øt √°p (+1)")
            
            if age_group == "65-74 tu·ªïi":
                score += 1
                details.append("‚úì Tu·ªïi 65-74 (+1)")
            elif age_group == "‚â• 75 tu·ªïi":
                score += 2
                details.append("‚úì Tu·ªïi ‚â•75 (+2)")
            
            if dm:
                score += 1
                details.append("‚úì ƒê√°i th√°o ƒë∆∞·ªùng (+1)")
            
            if stroke:
                score += 2
                details.append("‚úì Ti·ªÅn s·ª≠ ƒë·ªôt qu·ªµ/TIA (+2)")
            
            if vasc:
                score += 1
                details.append("‚úì B·ªánh m·∫°ch m√°u (+1)")
            
            if sex == "N·ªØ":
                score += 1
                details.append("‚úì Gi·ªõi t√≠nh n·ªØ (+1)")
            
            # Display result
            with col2:
                st.markdown("### üìä K·∫øt Qu·∫£")
                
                if score == 0:
                    st.success(f"## CHA‚ÇÇDS‚ÇÇ-VASc = {score}")
                    st.success("‚úÖ Nguy c∆° TH·∫§P")
                    risk = "0-0.2%/nƒÉm"
                elif score == 1:
                    st.warning(f"## CHA‚ÇÇDS‚ÇÇ-VASc = {score}")
                    st.warning("‚ö° Nguy c∆° TRUNG B√åNH")
                    risk = "0.6-2.0%/nƒÉm"
                elif score == 2:
                    st.warning(f"## CHA‚ÇÇDS‚ÇÇ-VASc = {score}")
                    st.warning("‚ö†Ô∏è Nguy c∆° TRUNG B√åNH-CAO")
                    risk = "2.2%/nƒÉm"
                else:
                    st.error(f"## CHA‚ÇÇDS‚ÇÇ-VASc = {score}")
                    st.error("üö® Nguy c∆° CAO")
                    if score <= 5:
                        risk = f"{2.2 + (score-2)*1.5:.1f}%/nƒÉm"
                    else:
                        risk = ">10%/nƒÉm"
            
            # Interpretation
            st.markdown("### üí° Gi·∫£i Th√≠ch & Khuy·∫øn C√°o")
            
            st.markdown(f"**Nguy c∆° ƒë·ªôt qu·ªµ h√†ng nƒÉm:** {risk}")
            
            # Breakdown
            st.markdown("**Chi ti·∫øt ƒëi·ªÉm:**")
            if details:
                for detail in details:
                    st.write(f"- {detail}")
            else:
                st.write("- Kh√¥ng c√≥ y·∫øu t·ªë nguy c∆°")
            
            # Recommendation
            st.markdown("---")
            st.markdown("### üíä Khuy·∫øn C√°o ƒêi·ªÅu Tr·ªã")
            
            if score == 0 and sex == "Nam":
                st.info("""
                **Kh√¥ng c·∫ßn kh√°ng ƒë√¥ng** (ho·∫∑c c√≥ th·ªÉ d√πng Aspirin)
                - Nguy c∆° ƒë·ªôt qu·ªµ r·∫•t th·∫•p
                - C√¢n nh·∫Øc l·∫°i ƒë·ªãnh k·ª≥
                """)
            elif score == 1 and sex == "Nam":
                st.warning("""
                **C√¢n nh·∫Øc kh√°ng ƒë√¥ng** (∆∞u ti√™n NOAC/Warfarin)
                - Th·∫£o lu·∫≠n v·ªõi b·ªánh nh√¢n v·ªÅ l·ª£i √≠ch/nguy c∆°
                - ƒê√°nh gi√° nguy c∆° ch·∫£y m√°u (HAS-BLED)
                """)
            elif score >= 1:
                st.error("""
                **KHUY·∫æN C√ÅO KH√ÅNG ƒê√îNG** (NOAC ho·∫∑c Warfarin)
                
                **L·ª±a ch·ªçn ∆∞u ti√™n:**
                - **NOAC (Kh√°ng ƒë√¥ng tr·ª±c ti·∫øp):**
                  - Apixaban 5mg x 2 l·∫ßn/ng√†y
                  - Rivaroxaban 20mg x 1 l·∫ßn/ng√†y
                  - Edoxaban 60mg x 1 l·∫ßn/ng√†y
                  - Dabigatran 150mg x 2 l·∫ßn/ng√†y
                
                - **Warfarin:**
                  - M·ª•c ti√™u INR 2.0-3.0
                  - Khi kh√¥ng d√πng ƒë∆∞·ª£c NOAC
                
                **Ch·ªëng ch·ªâ ƒë·ªãnh NOAC:**
                - Suy th·∫≠n n·∫∑ng (CrCl <15-30)
                - B·ªánh van tim n·∫∑ng
                - Thai k·ª≥
                """)
            
            # Reference
            with st.expander("üìö T√†i Li·ªáu Tham Kh·∫£o"):
                st.markdown("""
                **ESC Guidelines 2020 - Atrial Fibrillation**
                
                **C√°ch t√≠nh ƒëi·ªÉm:**
                - **C** = Congestive heart failure/LV dysfunction (+1)
                - **H** = Hypertension (+1)
                - **A‚ÇÇ** = Age ‚â•75 years (+2)
                - **D** = Diabetes mellitus (+1)
                - **S‚ÇÇ** = Prior Stroke/TIA/thromboembolism (+2)
                - **V** = Vascular disease (+1)
                - **A** = Age 65-74 years (+1)
                - **Sc** = Sex category (female) (+1)
                
                **T·ªïng ƒëi·ªÉm:** 0-9
                
                **Validation:**
                - Euro Heart Survey on AF
                - Danish National Patient Registry
                
                **Link:**
                - ESC 2020: https://academic.oup.com/eurheartj/article/42/5/373/5899003
                """)

# ===== HAS-BLED =====
elif "HAS-BLED" in score_type:
    st.subheader("ü©∏ HAS-BLED Score")
    st.caption("ƒê√°nh Gi√° Nguy C∆° Ch·∫£y M√°u Khi D√πng Kh√°ng ƒê√¥ng")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìã Ti√™u Ch√≠ ƒê√°nh Gi√°")
        
        # H - Hypertension
        htn_uncontrolled = st.checkbox(
            "**H** - TƒÉng huy·∫øt √°p kh√¥ng ki·ªÉm so√°t",
            help="SBP >160 mmHg"
        )
        
        # A - Abnormal renal/liver function
        renal = st.checkbox("Ch·ª©c nƒÉng th·∫≠n b·∫•t th∆∞·ªùng", help="L·ªçc c·∫ßu th·∫≠n <60 ho·∫∑c ch·∫°y th·∫≠n")
        liver = st.checkbox("Ch·ª©c nƒÉng gan b·∫•t th∆∞·ªùng", help="X∆° gan ho·∫∑c men gan tƒÉng >2 l·∫ßn")
        
        # S - Stroke
        stroke_bled = st.checkbox(
            "**S** - Ti·ªÅn s·ª≠ ƒë·ªôt qu·ªµ",
            help="ƒê·ªôt qu·ªµ tr∆∞·ªõc ƒë√¢y"
        )
        
        # B - Bleeding
        bleeding = st.checkbox(
            "**B** - Ti·ªÅn s·ª≠ ch·∫£y m√°u ho·∫∑c thi·ªÉu m√°u",
            help="Ch·∫£y m√°u n·∫∑ng ho·∫∑c thi·ªÉu m√°u tr∆∞·ªõc ƒë√¢y"
        )
        
        # L - Labile INR
        labile_inr = st.checkbox(
            "**L** - INR kh√¥ng ·ªïn ƒë·ªãnh",
            help="TTR <60% n·∫øu d√πng warfarin"
        )
        
        # E - Elderly
        age_hasbled = st.checkbox(
            "**E** - Tu·ªïi cao (>65)",
            help="Tu·ªïi >65"
        )
        
        # D - Drugs/Alcohol
        drugs = st.checkbox("D√πng thu·ªëc ch·ªëng ti·ªÉu c·∫ßu/NSAID", help="Aspirin, NSAID")
        alcohol = st.checkbox("L·∫°m d·ª•ng r∆∞·ª£u", help=">8 ƒë∆°n v·ªã/tu·∫ßn")
        
        if st.button("üßÆ T√≠nh ƒêi·ªÉm HAS-BLED", type="primary"):
            score = 0
            details = []
            
            if htn_uncontrolled:
                score += 1
                details.append("‚úì THA kh√¥ng ki·ªÉm so√°t (+1)")
            if renal or liver:
                score += 1 if renal else 0
                score += 1 if liver else 0
                if renal:
                    details.append("‚úì Suy th·∫≠n (+1)")
                if liver:
                    details.append("‚úì Suy gan (+1)")
            if stroke_bled:
                score += 1
                details.append("‚úì Ti·ªÅn s·ª≠ ƒë·ªôt qu·ªµ (+1)")
            if bleeding:
                score += 1
                details.append("‚úì Ti·ªÅn s·ª≠ ch·∫£y m√°u (+1)")
            if labile_inr:
                score += 1
                details.append("‚úì INR kh√¥ng ·ªïn ƒë·ªãnh (+1)")
            if age_hasbled:
                score += 1
                details.append("‚úì Tu·ªïi >65 (+1)")
            if drugs:
                score += 1
                details.append("‚úì D√πng ch·ªëng ti·ªÉu c·∫ßu/NSAID (+1)")
            if alcohol:
                score += 1
                details.append("‚úì L·∫°m d·ª•ng r∆∞·ª£u (+1)")
            
            with col2:
                st.markdown("### üìä K·∫øt Qu·∫£")
                
                if score <= 2:
                    st.success(f"## HAS-BLED = {score}")
                    st.success("‚úÖ Nguy c∆° ch·∫£y m√°u TH·∫§P")
                elif score == 3:
                    st.warning(f"## HAS-BLED = {score}")
                    st.warning("‚ö†Ô∏è Nguy c∆° TRUNG B√åNH")
                else:
                    st.error(f"## HAS-BLED = {score}")
                    st.error("üö® Nguy c∆° ch·∫£y m√°u CAO")
            
            st.markdown("### üí° Gi·∫£i Th√≠ch")
            
            if details:
                for d in details:
                    st.write(f"- {d}")
            
            st.markdown("---")
            st.markdown("### üíä Khuy·∫øn C√°o")
            
            if score <= 2:
                st.success("""
                **Nguy c∆° ch·∫£y m√°u ch·∫•p nh·∫≠n ƒë∆∞·ª£c**
                - C√≥ th·ªÉ d√πng kh√°ng ƒë√¥ng an to√†n
                - Theo d√µi ƒë·ªãnh k·ª≥
                """)
            elif score == 3:
                st.warning("""
                **C·∫©n th·∫≠n khi d√πng kh√°ng ƒë√¥ng**
                - Ki·ªÉm so√°t c√°c y·∫øu t·ªë nguy c∆° c√≥ th·ªÉ s·ª≠a
                - Theo d√µi s√°t h∆°n
                - C√¢n nh·∫Øc NOAC thay v√¨ warfarin
                """)
            else:
                st.error("""
                **Nguy c∆° ch·∫£y m√°u cao - Th·∫≠n tr·ªçng!**
                
                **KH√îNG PH·∫¢I CH·ªêNG CH·ªà ƒê·ªäNH kh√°ng ƒë√¥ng!**
                
                **C·∫ßn l√†m:**
                - Ki·ªÉm so√°t THA t·ªët h∆°n
                - Ng·ª´ng NSAID/aspirin n·∫øu ƒë∆∞·ª£c
                - Gi·∫£m r∆∞·ª£u
                - C√¢n nh·∫Øc d√πng PPI b·∫£o v·ªá d·∫° d√†y
                - ∆Øu ti√™n NOAC h∆°n warfarin
                - Theo d√µi s√°t sao
                """)

# ===== SCORE2 =====
elif "SCORE2" in score_type and "OP" not in score_type:
    st.subheader("üìä SCORE2 - ESC 2021")
    st.caption("ƒê√°nh Gi√° Nguy C∆° B·ªánh Tim M·∫°ch 10 NƒÉm (40-69 tu·ªïi)")
    
    st.info("""
    **SCORE2 d·ª± ƒëo√°n nguy c∆° 10 nƒÉm m·∫Øc:**
    - Nh·ªìi m√°u c∆° tim (t·ª≠ vong + kh√¥ng t·ª≠ vong)
    - ƒê·ªôt qu·ªµ (t·ª≠ vong + kh√¥ng t·ª≠ vong)
    """)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìã Th√¥ng Tin B·ªánh Nh√¢n")
        
        # Age
        age_score2 = st.slider(
            "Tu·ªïi",
            min_value=40,
            max_value=69,
            value=55,
            step=1
        )
        
        # Gender
        gender = st.radio(
            "Gi·ªõi t√≠nh",
            ["Nam", "N·ªØ"],
            horizontal=True
        )
        
        # Smoking
        smoking = st.radio(
            "H√∫t thu·ªëc",
            ["Kh√¥ng", "C√≥"],
            horizontal=True
        )
        
        # SBP
        sbp_score2 = st.number_input(
            "Huy·∫øt √°p t√¢m thu (mmHg)",
            min_value=90,
            max_value=200,
            value=120,
            step=5
        )
        
        # Cholesterol
        chol_type = st.radio(
            "Lo·∫°i cholesterol",
            ["Total Cholesterol", "Non-HDL Cholesterol"],
            horizontal=True
        )
        
        if chol_type == "Total Cholesterol":
            chol = st.number_input(
                "Total Cholesterol (mg/dL)",
                min_value=100,
                max_value=400,
                value=200,
                step=5,
                help="B√¨nh th∆∞·ªùng: <200 mg/dL"
            )
        else:
            chol = st.number_input(
                "Non-HDL Cholesterol (mg/dL)",
                min_value=80,
                max_value=350,
                value=150,
                step=5,
                help="= Total Chol - HDL Chol"
            )
        
        # Risk region
        risk_region = st.selectbox(
            "Khu v·ª±c nguy c∆°",
            [
                "Nguy c∆° th·∫•p (Low risk - B·∫Øc √Çu, T√¢y √Çu)",
                "Nguy c∆° trung b√¨nh (Moderate risk - Nam √Çu)",
                "Nguy c∆° cao (High risk - ƒê√¥ng √Çu)",
                "Nguy c∆° r·∫•t cao (Very high risk - m·ªôt s·ªë n∆∞·ªõc ƒê√¥ng √Çu)"
            ],
            index=1,
            help="Vi·ªát Nam th∆∞·ªùng x·∫øp v√†o moderate-high risk"
        )
        
        if st.button("üßÆ T√≠nh SCORE2", type="primary"):
            # Simplified calculation (actual SCORE2 uses complex algorithms)
            # This is an approximation based on risk factors
            
            base_risk = 2.0  # Base risk %
            
            # Age factor
            age_factor = (age_score2 - 40) * 0.3
            
            # Gender factor
            gender_factor = 1.5 if gender == "Nam" else 1.0
            
            # Smoking factor
            smoking_factor = 2.0 if smoking == "C√≥" else 1.0
            
            # SBP factor
            if sbp_score2 < 120:
                sbp_factor = 0.8
            elif sbp_score2 < 140:
                sbp_factor = 1.0
            elif sbp_score2 < 160:
                sbp_factor = 1.5
            else:
                sbp_factor = 2.0
            
            # Cholesterol factor
            if chol < 200:
                chol_factor = 0.9
            elif chol < 240:
                chol_factor = 1.2
            else:
                chol_factor = 1.8
            
            # Region factor
            if "th·∫•p" in risk_region:
                region_factor = 0.7
            elif "trung b√¨nh" in risk_region:
                region_factor = 1.0
            elif "cao" in risk_region and "r·∫•t cao" not in risk_region:
                region_factor = 1.5
            else:
                region_factor = 2.0
            
            # Calculate final risk
            risk_10y = base_risk + age_factor
            risk_10y *= gender_factor * smoking_factor * sbp_factor * chol_factor * region_factor
            risk_10y = min(risk_10y, 50)  # Cap at 50%
            risk_10y = round(risk_10y, 1)
            
            with col2:
                st.markdown("### üìä K·∫øt Qu·∫£")
                
                if risk_10y < 2.5:
                    st.success(f"## {risk_10y}%")
                    st.success("‚úÖ Nguy c∆° TH·∫§P")
                    risk_category = "Nguy c∆° th·∫•p ƒë·∫øn trung b√¨nh (<2.5%)"
                    color = "green"
                elif risk_10y < 7.5:
                    st.warning(f"## {risk_10y}%")
                    st.warning("‚ö†Ô∏è Nguy c∆° TRUNG B√åNH")
                    risk_category = "Nguy c∆° trung b√¨nh (2.5-7.5%)"
                    color = "orange"
                elif risk_10y < 10:
                    st.error(f"## {risk_10y}%")
                    st.error("‚ùó Nguy c∆° CAO")
                    risk_category = "Nguy c∆° cao (7.5-10%)"
                    color = "red"
                else:
                    st.error(f"## {risk_10y}%")
                    st.error("üö® Nguy c∆° R·∫§T CAO")
                    risk_category = "Nguy c∆° r·∫•t cao (‚â•10%)"
                    color = "darkred"
            
            st.markdown("### üí° Gi·∫£i Th√≠ch")
            st.write(f"**Nguy c∆° tim m·∫°ch 10 nƒÉm:** {risk_10y}%")
            st.write(f"**Ph√¢n lo·∫°i:** {risk_category}")
            
            st.markdown("---")
            st.markdown("### üíä Khuy·∫øn C√°o ƒêi·ªÅu Tr·ªã")
            
            if risk_10y < 2.5:
                st.success("""
                **Nguy c∆° th·∫•p - Can thi·ªáp l·ªëi s·ªëng**
                
                **Khuy·∫øn c√°o:**
                - Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh
                - Kh√¥ng c·∫ßn statin n·∫øu kh√¥ng c√≥ y·∫øu t·ªë nguy c∆° kh√°c
                - T√°i ƒë√°nh gi√° sau 5 nƒÉm
                - Ki·ªÉm so√°t c√°c y·∫øu t·ªë nguy c∆°
                """)
            elif risk_10y < 7.5:
                st.warning("""
                **Nguy c∆° trung b√¨nh - Can thi·ªáp l·ªëi s·ªëng + C√¢n nh·∫Øc statin**
                
                **Khuy·∫øn c√°o:**
                - Thay ƒë·ªïi l·ªëi s·ªëng m·∫°nh m·∫Ω
                - **C√¢n nh·∫Øc statin** n·∫øu:
                  - LDL-C ‚â•70 mg/dL
                  - C√≥ y·∫øu t·ªë nguy c∆° kh√°c (ti·ªÅn s·ª≠ gia ƒë√¨nh, b√©o ph√¨...)
                - M·ª•c ti√™u LDL-C: <100 mg/dL
                - T√°i ƒë√°nh gi√° sau 2-3 nƒÉm
                """)
            elif risk_10y < 10:
                st.error("""
                **Nguy c∆° cao - KHUY·∫æN C√ÅO STATIN**
                
                **Khuy·∫øn c√°o:**
                - **Statin li·ªÅu trung b√¨nh-cao**
                  - Atorvastatin 20-40mg
                  - Rosuvastatin 10-20mg
                - **M·ª•c ti√™u LDL-C: <70 mg/dL**
                - C√¢n nh·∫Øc gi·∫£m ‚â•50% LDL-C t·ª´ baseline
                - Ki·ªÉm so√°t ch·∫∑t ch·∫Ω c√°c y·∫øu t·ªë nguy c∆°:
                  - BP <140/90 (ho·∫∑c <130/80 n·∫øu c√≥ ƒë√°i th√°o ƒë∆∞·ªùng)
                  - Ng·ª´ng h√∫t thu·ªëc
                  - Gi·∫£m c√¢n n·∫øu th·ª´a c√¢n
                - Theo d√µi s√°t
                """)
            else:
                st.error("""
                **Nguy c∆° r·∫•t cao - CAN THI·ªÜP T√çCH C·ª∞C**
                
                **Khuy·∫øn c√°o:**
                - **Statin li·ªÅu cao**
                  - Atorvastatin 40-80mg
                  - Rosuvastatin 20-40mg
                - **M·ª•c ti√™u LDL-C: <55 mg/dL**
                - C√¢n nh·∫Øc gi·∫£m ‚â•50% LDL-C t·ª´ baseline
                - **C√¢n nh·∫Øc th√™m Ezetimibe** n·∫øu kh√¥ng ƒë·∫°t m·ª•c ti√™u
                - **C√¢n nh·∫Øc PCSK9 inhibitor** n·∫øu v·∫´n kh√¥ng ƒë·∫°t
                - Aspirin li·ªÅu th·∫•p (n·∫øu kh√¥ng ch·ªëng ch·ªâ ƒë·ªãnh)
                - Ki·ªÉm so√°t THA ch·∫∑t ch·∫Ω (<130/80)
                - Ng·ª´ng h√∫t thu·ªëc ngay
                - Theo d√µi ch·∫∑t ch·∫Ω, t√°i kh√°m 3-6 th√°ng
                """)
            
            with st.expander("üìö T√†i Li·ªáu Tham Kh·∫£o"):
                st.markdown("""
                **ESC Guidelines 2021 on Cardiovascular Disease Prevention**
                
                **SCORE2 thay th·∫ø SCORE c≈© (2021):**
                - D·ª± ƒëo√°n s·ª± ki·ªán tim m·∫°ch t·ª≠ vong + kh√¥ng t·ª≠ vong
                - Ch√≠nh x√°c h∆°n cho d√¢n s·ªë ch√¢u √Çu hi·ªán ƒë·∫°i
                - Ph√¢n theo 4 khu v·ª±c nguy c∆°
                
                **√Åp d·ª•ng cho:**
                - Ng∆∞·ªùi 40-69 tu·ªïi kh√¥ng c√≥ b·ªánh tim m·∫°ch
                - Kh√¥ng c√≥ ƒë√°i th√°o ƒë∆∞·ªùng
                - LDL-C <190 mg/dL
                
                **L∆∞u √Ω cho Vi·ªát Nam:**
                - X·∫øp v√†o khu v·ª±c moderate-high risk
                - C√¢n nh·∫Øc c√°c y·∫øu t·ªë ƒë·ªãa ph∆∞∆°ng
                
                **Reference:**
                SCORE2 working group and ESC Cardiovascular risk collaboration. 
                Eur Heart J. 2021;42(25):2439-2454.
                
                **Link:**
                https://academic.oup.com/eurheartj/article/42/25/2439/6297709
                """)

# ===== SCORE2-OP =====
elif "SCORE2-OP" in score_type:
    st.subheader("üë¥ SCORE2-OP - ESC 2021")
    st.caption("ƒê√°nh Gi√° Nguy C∆° Tim M·∫°ch ·ªû Ng∆∞·ªùi Cao Tu·ªïi (‚â•70 tu·ªïi)")
    
    st.info("""
    **SCORE2-OP (Older Persons) d√†nh cho ng∆∞·ªùi ‚â•70 tu·ªïi**
    
    D·ª± ƒëo√°n nguy c∆° 5-10 nƒÉm m·∫Øc b·ªánh tim m·∫°ch.
    """)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìã Th√¥ng Tin B·ªánh Nh√¢n")
        
        # Age
        age_op = st.slider(
            "Tu·ªïi",
            min_value=70,
            max_value=89,
            value=75,
            step=1
        )
        
        # Gender
        gender_op = st.radio(
            "Gi·ªõi t√≠nh",
            ["Nam", "N·ªØ"],
            horizontal=True,
            key="gender_op"
        )
        
        # Smoking
        smoking_op = st.radio(
            "H√∫t thu·ªëc",
            ["Kh√¥ng", "C√≥"],
            horizontal=True,
            key="smoking_op"
        )
        
        # SBP
        sbp_op = st.number_input(
            "Huy·∫øt √°p t√¢m thu (mmHg)",
            min_value=90,
            max_value=200,
            value=140,
            step=5,
            key="sbp_op"
        )
        
        # Cholesterol
        chol_op = st.number_input(
            "Total Cholesterol (mg/dL)",
            min_value=100,
            max_value=400,
            value=200,
            step=5,
            key="chol_op"
        )
        
        # Risk region
        risk_region_op = st.selectbox(
            "Khu v·ª±c nguy c∆°",
            [
                "Nguy c∆° th·∫•p",
                "Nguy c∆° trung b√¨nh",
                "Nguy c∆° cao",
                "Nguy c∆° r·∫•t cao"
            ],
            index=1,
            key="region_op"
        )
        
        if st.button("üßÆ T√≠nh SCORE2-OP", type="primary"):
            # Simplified calculation for OP
            base_risk = 5.0  # Higher base for older age
            
            age_factor = (age_op - 70) * 0.5
            gender_factor = 1.3 if gender_op == "Nam" else 1.0
            smoking_factor = 1.8 if smoking_op == "C√≥" else 1.0
            
            if sbp_op < 140:
                sbp_factor = 0.9
            elif sbp_op < 160:
                sbp_factor = 1.2
            else:
                sbp_factor = 1.6
            
            if chol_op < 200:
                chol_factor = 0.9
            else:
                chol_factor = 1.3
            
            region_dict = {
                "Nguy c∆° th·∫•p": 0.7,
                "Nguy c∆° trung b√¨nh": 1.0,
                "Nguy c∆° cao": 1.3,
                "Nguy c∆° r·∫•t cao": 1.7
            }
            region_factor = region_dict[risk_region_op]
            
            risk_op = base_risk + age_factor
            risk_op *= gender_factor * smoking_factor * sbp_factor * chol_factor * region_factor
            risk_op = min(risk_op, 60)
            risk_op = round(risk_op, 1)
            
            with col2:
                st.markdown("### üìä K·∫øt Qu·∫£")
                
                if risk_op < 7.5:
                    st.success(f"## {risk_op}%")
                    st.success("‚úÖ Nguy c∆° TH·∫§P-TRUNG B√åNH")
                elif risk_op < 15:
                    st.warning(f"## {risk_op}%")
                    st.warning("‚ö†Ô∏è Nguy c∆° CAO")
                else:
                    st.error(f"## {risk_op}%")
                    st.error("üö® Nguy c∆° R·∫§T CAO")
            
            st.markdown("### üí° Gi·∫£i Th√≠ch")
            st.write(f"**Nguy c∆° tim m·∫°ch 5-10 nƒÉm:** {risk_op}%")
            
            st.markdown("---")
            st.markdown("### üíä Khuy·∫øn C√°o ƒêi·ªÅu Tr·ªã ·ªû Ng∆∞·ªùi Cao Tu·ªïi")
            
            st.warning("""
            **‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng v·ªõi ng∆∞·ªùi cao tu·ªïi:**
            - C√¢n nh·∫Øc tu·ªïi th·ªç d·ª± ki·∫øn
            - ƒê√°nh gi√° t√¨nh tr·∫°ng s·ª©c kh·ªèe t·ªïng th·ªÉ
            - Xem x√©t ch·∫•t l∆∞·ª£ng cu·ªôc s·ªëng
            - Nguy c∆° t√°c d·ª•ng ph·ª• cao h∆°n
            """)
            
            if risk_op < 7.5:
                st.success("""
                **Can thi·ªáp l·ªëi s·ªëng ∆∞u ti√™n**
                - Statin li·ªÅu th·∫•p n·∫øu dung n·∫°p t·ªët
                - Ki·ªÉm so√°t THA nh·∫π nh√†ng (m·ª•c ti√™u <140-150/90)
                - Ho·∫°t ƒë·ªông th·ªÉ l·ª±c ph√π h·ª£p
                """)
            elif risk_op < 15:
                st.warning("""
                **C√¢n nh·∫Øc statin li·ªÅu trung b√¨nh**
                - Atorvastatin 10-20mg ho·∫∑c Rosuvastatin 5-10mg
                - M·ª•c ti√™u LDL-C: <100 mg/dL (linh ho·∫°t)
                - Theo d√µi ch·ª©c nƒÉng gan, th·∫≠n
                - Theo d√µi tri·ªáu ch·ª©ng c∆°
                """)
            else:
                st.error("""
                **Statin li·ªÅu trung b√¨nh, tr√°nh li·ªÅu cao**
                - Atorvastatin 20-40mg
                - M·ª•c ti√™u LDL-C: <70-100 mg/dL (c√° th·ªÉ h√≥a)
                - **KH√îNG n√™n qu√° t√≠ch c·ª±c** ·ªü ng∆∞·ªùi r·∫•t cao tu·ªïi (>85)
                - C√¢n nh·∫Øc l·ª£i √≠ch/nguy c∆° c√° th·ªÉ
                - Aspirin: C√¢n nh·∫Øc c·∫©n th·∫≠n (nguy c∆° ch·∫£y m√°u cao)
                """)
            
            with st.expander("üìö T√†i Li·ªáu Tham Kh·∫£o"):
                st.markdown("""
                **SCORE2-OP (Older Persons) - ESC 2021**
                
                **ƒê·∫∑c ƒëi·ªÉm:**
                - Thi·∫øt k·∫ø ri√™ng cho ng∆∞·ªùi ‚â•70 tu·ªïi
                - Nguy c∆° tuy·ªát ƒë·ªëi cao h∆°n do tu·ªïi
                - Khuy·∫øn c√°o ƒëi·ªÅu tr·ªã c√° th·ªÉ h√≥a h∆°n
                
                **Ng∆∞·ª°ng nguy c∆° kh√°c v·ªõi SCORE2:**
                - <7.5%: Nguy c∆° th·∫•p-trung b√¨nh
                - 7.5-15%: Nguy c∆° cao
                - ‚â•15%: Nguy c∆° r·∫•t cao
                
                **L∆∞u √Ω:**
                - C√¢n nh·∫Øc tu·ªïi th·ªç d·ª± ki·∫øn
                - ƒê√°nh gi√° t√¨nh tr·∫°ng ch·ª©c nƒÉng
                - Tr√°nh can thi·ªáp qu√° m·ª©c
                
                **Reference:**
                SCORE2-OP working group. Eur Heart J. 2021;42(25):2455-2467.
                """)

# ===== HEART Score =====
elif "HEART" in score_type:
    st.subheader("‚ù§Ô∏è HEART Score")
    st.caption("ƒê√°nh Gi√° Nguy C∆° ACS Trong ƒêau Ng·ª±c C·∫•p")
    
    st.info("""
    üöß **ƒêang ph√°t tri·ªÉn** - D·ª± ki·∫øn ho√†n th√†nh: Tu·∫ßn 2
    
    **HEART Score bao g·ªìm:**
    - **H** - History (Ti·ªÅn s·ª≠)
    - **E** - ECG findings
    - **A** - Age (Tu·ªïi)
    - **R** - Risk factors (Y·∫øu t·ªë nguy c∆°)
    - **T** - Troponin
    """)

# ===== TIMI Risk =====
elif "TIMI" in score_type:
    st.subheader("üíî TIMI Risk Score")
    st.caption("ƒê√°nh Gi√° Nguy C∆° Trong ACS")
    
    st.info("""
    üöß **ƒêang ph√°t tri·ªÉn** - D·ª± ki·∫øn ho√†n th√†nh: Tu·∫ßn 2-3
    
    **C√≥ 2 phi√™n b·∫£n:**
    - TIMI Risk Score for UA/NSTEMI
    - TIMI Risk Score for STEMI
    """)

# ===== GRACE =====
elif "GRACE" in score_type:
    st.subheader("üìä GRACE Score")
    st.caption("Ti√™n L∆∞·ª£ng ACS")
    
    st.info("""
    üöß **ƒêang ph√°t tri·ªÉn** - D·ª± ki·∫øn ho√†n th√†nh: Tu·∫ßn 3
    
    **GRACE Score d·ª± ƒëo√°n:**
    - T·ª≠ vong trong b·ªánh vi·ªán
    - T·ª≠ vong 6 th√°ng
    """)

# ===== Framingham =====
elif "Framingham" in score_type:
    st.subheader("üìà Framingham Risk Score")
    st.caption("Nguy C∆° Tim M·∫°ch 10 NƒÉm")
    
    st.info("""
    üöß **ƒêang ph√°t tri·ªÉn** - D·ª± ki·∫øn ho√†n th√†nh: Tu·∫ßn 3
    
    **D·ª± ƒëo√°n nguy c∆° 10 nƒÉm:**
    - Nh·ªìi m√°u c∆° tim
    - T·ª≠ vong do b·ªánh tim m·∫°ch
    """)

# ========== FOOTER ==========
st.markdown("---")
st.warning("""
**‚ö†Ô∏è L∆∞u √Ω Quan Tr·ªçng:**
- Thang ƒëi·ªÉm ch·ªâ h·ªó tr·ª£ quy·∫øt ƒë·ªãnh l√¢m s√†ng
- KH√îNG thay th·∫ø ƒë√°nh gi√° to√†n di·ªán c·ªßa b√°c sƒ©
- C·∫ßn c√¢n nh·∫Øc ƒë·∫∑c ƒëi·ªÉm c√° nh√¢n b·ªánh nh√¢n
- Tu√¢n th·ªß h∆∞·ªõng d·∫´n v√† ch√≠nh s√°ch ƒë·ªãa ph∆∞∆°ng
""")

st.caption("üìö D·ª±a tr√™n ESC Guidelines 2020/2024, AHA/ACC Guidelines, BMJ 2010 (HAS-BLED)")
st.caption("‚ö†Ô∏è Ch·ªâ m·ª•c ƒë√≠ch tham kh·∫£o - Lu√¥n x√°c minh v·ªõi h∆∞·ªõng d·∫´n m·ªõi nh·∫•t")

