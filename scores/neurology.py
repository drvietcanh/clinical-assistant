"""
Neurology Scoring Systems
All neurological assessment calculators
"""

import streamlit as st


def render_gcs():
    """Glasgow Coma Scale Calculator"""
    st.subheader("üß† Glasgow Coma Scale (GCS)")
    st.caption("ƒê√°nh Gi√° M·ª©c ƒê·ªô √ù Th·ª©c")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìã Thang ƒê√°nh Gi√°")
        
        # Eye Opening (E)
        st.markdown("#### üëÅÔ∏è Eye Opening (M·ªü M·∫Øt)")
        eye_options = {
            "Spontaneous (T·ª± nhi√™n)": 4,
            "To speech (Khi g·ªçi)": 3,
            "To pain (Khi ƒëau)": 2,
            "None (Kh√¥ng m·ªü)": 1
        }
        eye_response = st.radio(
            "Ph·∫£n ·ª©ng m·ªü m·∫Øt:",
            list(eye_options.keys()),
            key="gcs_eye"
        )
        eye_score = eye_options[eye_response]
        
        # Verbal Response (V)
        st.markdown("#### üó£Ô∏è Verbal Response (L·ªùi N√≥i)")
        verbal_options = {
            "Oriented (T·ªânh t√°o, ƒë·ªãnh h∆∞·ªõng ƒë√∫ng)": 5,
            "Confused (L·∫´n l·ªôn)": 4,
            "Inappropriate words (N√≥i lung tung)": 3,
            "Incomprehensible sounds (R√™n r·ªâ)": 2,
            "None (Kh√¥ng n√≥i)": 1
        }
        verbal_response = st.radio(
            "Ph·∫£n ·ª©ng l·ªùi n√≥i:",
            list(verbal_options.keys()),
            key="gcs_verbal"
        )
        verbal_score = verbal_options[verbal_response]
        
        # Motor Response (M)
        st.markdown("#### üí™ Motor Response (V·∫≠n ƒê·ªông)")
        motor_options = {
            "Obeys commands (L√†m theo l·ªánh)": 6,
            "Localizes pain (ƒê·ªãnh v·ªã ƒëau)": 5,
            "Withdraws from pain (R√∫t tay khi ƒëau)": 4,
            "Flexion to pain (C·ª≠ ƒë·ªông b·∫•t th∆∞·ªùng)": 3,
            "Extension to pain (Du·ªói c·ª©ng)": 2,
            "None (Kh√¥ng c·ª≠ ƒë·ªông)": 1
        }
        motor_response = st.radio(
            "Ph·∫£n ·ª©ng v·∫≠n ƒë·ªông:",
            list(motor_options.keys()),
            key="gcs_motor"
        )
        motor_score = motor_options[motor_response]
        
        if st.button("üßÆ T√≠nh GCS", type="primary"):
            total_score = eye_score + verbal_score + motor_score
            
            with col2:
                st.markdown("### üìä K·∫øt Qu·∫£")
                
                st.markdown(f"**E{eye_score} V{verbal_score} M{motor_score}**")
                
                if total_score >= 14:
                    st.success(f"## GCS = {total_score}")
                    st.success("‚úÖ T·ªïn Th∆∞∆°ng Nh·∫π")
                    severity = "Mild TBI"
                elif total_score >= 9:
                    st.warning(f"## GCS = {total_score}")
                    st.warning("‚ö†Ô∏è T·ªïn Th∆∞∆°ng Trung B√¨nh")
                    severity = "Moderate TBI"
                else:
                    st.error(f"## GCS = {total_score}")
                    st.error("üö® T·ªïn Th∆∞∆°ng N·∫∑ng")
                    severity = "Severe TBI"
            
            st.markdown("### üí° Gi·∫£i Th√≠ch")
            
            st.write(f"**T·ªïng ƒëi·ªÉm:** {total_score}/15")
            st.write(f"**Ph√¢n lo·∫°i:** {severity}")
            
            st.markdown(f"""
            **Chi ti·∫øt:**
            - Eye Opening: {eye_score}/4 - {eye_response}
            - Verbal Response: {verbal_score}/5 - {verbal_response}
            - Motor Response: {motor_score}/6 - {motor_response}
            """)
            
            st.markdown("---")
            st.markdown("### üíä √ù Nghƒ©a L√¢m S√†ng")
            
            if total_score >= 14:
                st.success("""
                **GCS 14-15: Ch·∫•n th∆∞∆°ng s·ªç n√£o nh·∫π**
                - Theo d√µi l√¢m s√†ng
                - CT scan n·∫øu c√≥ tri·ªáu ch·ª©ng
                - Th∆∞·ªùng h·ªìi ph·ª•c t·ªët
                """)
            elif total_score >= 9:
                st.warning("""
                **GCS 9-13: Ch·∫•n th∆∞∆°ng s·ªç n√£o trung b√¨nh**
                - Nh·∫≠p vi·ªán theo d√µi
                - CT scan s·ªç n√£o
                - Theo d√µi s√°t c√°c d·∫•u hi·ªáu tƒÉng √°p l·ª±c n·ªôi s·ªç
                - C√≥ th·ªÉ c·∫ßn can thi·ªáp
                """)
            else:
                st.error("""
                **GCS ‚â§8: Ch·∫•n th∆∞∆°ng s·ªç n√£o n·∫∑ng**
                - **ƒê·∫∂T N·ªòI KH√ç QU·∫¢N NGAY** (GCS ‚â§8)
                - Nh·∫≠p ICU
                - CT scan kh·∫©n c·∫•p
                - Theo d√µi √°p l·ª±c n·ªôi s·ªç
                - C√≥ th·ªÉ c·∫ßn ph·∫´u thu·∫≠t
                - Ti√™n l∆∞·ª£ng x·∫•u
                """)
            
            # Additional warnings
            if total_score <= 8:
                st.error("""
                **‚ö†Ô∏è QUAN TR·ªåNG:**
                - GCS ‚â§8 = M·∫•t kh·∫£ nƒÉng b·∫£o v·ªá ƒë∆∞·ªùng th·ªü
                - Ch·ªâ ƒë·ªãnh ƒë·∫∑t n·ªôi kh√≠ qu·∫£n
                - Nguy c∆° h√≠t s·∫∑c cao
                """)
            
            with st.expander("üìö T√†i Li·ªáu Tham Kh·∫£o"):
                st.markdown("""
                **Glasgow Coma Scale (GCS)**
                
                **Thang ƒëi·ªÉm (3-15):**
                
                **Eye Opening (1-4):**
                - 4: Spontaneous
                - 3: To speech
                - 2: To pain
                - 1: None
                
                **Verbal Response (1-5):**
                - 5: Oriented
                - 4: Confused
                - 3: Inappropriate words
                - 2: Incomprehensible sounds
                - 1: None
                
                **Motor Response (1-6):**
                - 6: Obeys commands
                - 5: Localizes pain
                - 4: Withdraws from pain
                - 3: Flexion to pain (decorticate)
                - 2: Extension to pain (decerebrate)
                - 1: None
                
                **Ph√¢n lo·∫°i ch·∫•n th∆∞∆°ng s·ªç n√£o:**
                - GCS 14-15: Mild TBI
                - GCS 9-13: Moderate TBI
                - GCS 3-8: Severe TBI
                
                **Ch·ªâ ƒë·ªãnh ƒë·∫∑t n·ªôi kh√≠ qu·∫£n:**
                - GCS ‚â§8 (m·∫•t kh·∫£ nƒÉng b·∫£o v·ªá ƒë∆∞·ªùng th·ªü)
                
                **Reference:**
                Teasdale G, Jennett B. Assessment of coma and impaired consciousness. A practical scale. Lancet. 1974;2(7872):81-84.
                
                **Validation:**
                - Widely validated across trauma, neurosurgery, ICU
                - Gold standard for consciousness assessment
                """)


def render_nihss():
    """NIHSS Score Calculator"""
    st.subheader("üß† NIHSS - NIH Stroke Scale")
    st.caption("M·ª©c ƒê·ªô N·∫∑ng ƒê·ªôt Qu·ªµ")
    
    st.warning("üöß **ƒêang ph√°t tri·ªÉn** - D·ª± ki·∫øn ho√†n th√†nh: Tu·∫ßn 2")
    
    st.info("""
    **NIHSS ƒë√°nh gi√°:**
    - Level of consciousness
    - Gaze
    - Visual fields
    - Facial palsy
    - Motor arm/leg
    - Ataxia
    - Sensory
    - Language
    - Dysarthria
    - Extinction/inattention
    
    **T·ªïng ƒëi·ªÉm:** 0-42
    """)


def render_ich_score():
    """ICH Score Calculator"""
    st.subheader("üß† ICH Score")
    st.caption("Ti√™n L∆∞·ª£ng Xu·∫•t Huy·∫øt N·ªôi S·ªç")
    
    st.warning("üöß **ƒêang ph√°t tri·ªÉn** - D·ª± ki·∫øn ho√†n th√†nh: Tu·∫ßn 3")


def render_hunt_hess():
    """Hunt & Hess Scale Calculator"""
    st.subheader("üß† Hunt & Hess Scale")
    st.caption("Ph√¢n Lo·∫°i Xu·∫•t Huy·∫øt D∆∞·ªõi Nh·ªán")
    
    st.warning("üöß **ƒêang ph√°t tri·ªÉn** - D·ª± ki·∫øn ho√†n th√†nh: Tu·∫ßn 3")


def render_mrs():
    """Modified Rankin Scale Calculator"""
    st.subheader("üß† mRS - Modified Rankin Scale")
    st.caption("M·ª©c ƒê·ªô Khuy·∫øt T·∫≠t Sau ƒê·ªôt Qu·ªµ")
    
    st.warning("üöß **ƒêang ph√°t tri·ªÉn** - D·ª± ki·∫øn ho√†n th√†nh: Tu·∫ßn 3")


# Router function
def render_neurology_calculator(calculator_id):
    """
    Route to the correct neurology calculator based on ID
    
    Args:
        calculator_id: The ID of the calculator to render
    """
    calculators = {
        "GCS": render_gcs,
        "NIHSS": render_nihss,
        "ICH Score": render_ich_score,
        "Hunt & Hess": render_hunt_hess,
        "mRS": render_mrs,
    }
    
    calculator_func = calculators.get(calculator_id)
    if calculator_func:
        calculator_func()
    else:
        st.error(f"Calculator '{calculator_id}' not found!")

