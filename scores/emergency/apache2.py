"""
APACHE II Score (Acute Physiology and Chronic Health Evaluation II)
====================================================================

ICU mortality prediction scoring system

Reference:
- Knaus WA, et al. APACHE II: a severity of disease classification system.
  Crit Care Med. 1985;13(10):818-829.

APACHE II Components:
1. Acute Physiology Score (APS): 12 physiological variables (0-60 points)
2. Age points (0-6 points)
3. Chronic Health points (0-5 points)

Total: 0-71 points

Clinical Utility:
- Predict ICU mortality
- Stratify disease severity
- Research and quality improvement
- ICU resource allocation
"""

import streamlit as st
import math


def get_temp_score(temp: float) -> int:
    """Temperature score"""
    if temp >= 41:
        return 4
    elif temp >= 39:
        return 3
    elif temp >= 38.5:
        return 1
    elif temp >= 36:
        return 0
    elif temp >= 34:
        return 1
    elif temp >= 32:
        return 2
    elif temp >= 30:
        return 3
    else:
        return 4


def get_map_score(map_val: float) -> int:
    """Mean arterial pressure score"""
    if map_val >= 160:
        return 4
    elif map_val >= 130:
        return 3
    elif map_val >= 110:
        return 2
    elif map_val >= 70:
        return 0
    elif map_val >= 50:
        return 2
    else:
        return 4


def get_hr_score(hr: float) -> int:
    """Heart rate score"""
    if hr >= 180:
        return 4
    elif hr >= 140:
        return 3
    elif hr >= 110:
        return 2
    elif hr >= 70:
        return 0
    elif hr >= 55:
        return 2
    elif hr >= 40:
        return 3
    else:
        return 4


def get_rr_score(rr: float) -> int:
    """Respiratory rate score"""
    if rr >= 50:
        return 4
    elif rr >= 35:
        return 3
    elif rr >= 25:
        return 1
    elif rr >= 12:
        return 0
    elif rr >= 10:
        return 1
    elif rr >= 6:
        return 2
    else:
        return 4


def get_oxygenation_score(fio2: float, pao2: float, paco2: float, ph: float) -> int:
    """Oxygenation score - A-a gradient if FiO2‚â•0.5, else PaO2"""
    if fio2 >= 50:  # Use A-a gradient
        # A-a gradient = [(FiO2 √ó (Patm - PH2O)) - (PaCO2/0.8)] - PaO2
        # Simplified: ‚âà (FiO2 √ó 713) - (PaCO2/0.8) - PaO2
        aa_gradient = (fio2 * 7.13) - (paco2 / 0.8) - pao2
        if aa_gradient >= 500:
            return 4
        elif aa_gradient >= 350:
            return 3
        elif aa_gradient >= 200:
            return 2
        elif aa_gradient < 200:
            return 0
    else:  # Use PaO2
        if pao2 < 55:
            return 4
        elif pao2 < 60:
            return 3
        elif pao2 < 70:
            return 1
        else:
            return 0
    return 0


def get_ph_score(ph: float) -> int:
    """Arterial pH score"""
    if ph >= 7.7:
        return 4
    elif ph >= 7.6:
        return 3
    elif ph >= 7.5:
        return 1
    elif ph >= 7.33:
        return 0
    elif ph >= 7.25:
        return 2
    elif ph >= 7.15:
        return 3
    else:
        return 4


def get_na_score(na: float) -> int:
    """Serum sodium score"""
    if na >= 180:
        return 4
    elif na >= 160:
        return 3
    elif na >= 155:
        return 2
    elif na >= 150:
        return 1
    elif na >= 130:
        return 0
    elif na >= 120:
        return 2
    elif na >= 111:
        return 3
    else:
        return 4


def get_k_score(k: float) -> int:
    """Serum potassium score"""
    if k >= 7:
        return 4
    elif k >= 6:
        return 3
    elif k >= 5.5:
        return 1
    elif k >= 3.5:
        return 0
    elif k >= 3:
        return 1
    elif k >= 2.5:
        return 2
    else:
        return 4


def get_cr_score(cr: float, has_arf: bool) -> int:
    """Serum creatinine score (double if acute renal failure)"""
    if cr >= 3.5:
        base_score = 4
    elif cr >= 2:
        base_score = 3
    elif cr >= 1.5:
        base_score = 2
    elif cr >= 0.6:
        base_score = 0
    else:
        base_score = 2
    
    return base_score * 2 if has_arf else base_score


def get_hct_score(hct: float) -> int:
    """Hematocrit score"""
    if hct >= 60:
        return 4
    elif hct >= 50:
        return 2
    elif hct >= 46:
        return 1
    elif hct >= 30:
        return 0
    elif hct >= 20:
        return 2
    else:
        return 4


def get_wbc_score(wbc: float) -> int:
    """White blood cell count score"""
    if wbc >= 40:
        return 4
    elif wbc >= 20:
        return 2
    elif wbc >= 15:
        return 1
    elif wbc >= 3:
        return 0
    elif wbc >= 1:
        return 2
    else:
        return 4


def get_gcs_score(gcs: int) -> int:
    """Glasgow Coma Scale score (15 - GCS)"""
    return 15 - gcs


def get_age_score(age: int) -> int:
    """Age points"""
    if age < 45:
        return 0
    elif age < 55:
        return 2
    elif age < 65:
        return 3
    elif age < 75:
        return 5
    else:
        return 6


def get_chronic_health_score(
    has_chronic: bool,
    is_post_emergency_surgery: bool,
    is_nonsurgical: bool
) -> int:
    """Chronic health points"""
    if not has_chronic:
        return 0
    
    if is_nonsurgical or is_post_emergency_surgery:
        return 5
    else:  # Elective post-op
        return 2


def calculate_apache2(params: dict) -> dict:
    """Calculate APACHE II score"""
    
    # Acute Physiology Score
    aps = 0
    details = []
    
    temp_score = get_temp_score(params['temperature'])
    aps += temp_score
    details.append(f"Nhi·ªát ƒë·ªô {params['temperature']:.1f}¬∞C ‚Üí {temp_score} ƒëi·ªÉm")
    
    map_score = get_map_score(params['map'])
    aps += map_score
    details.append(f"MAP {params['map']:.0f} mmHg ‚Üí {map_score} ƒëi·ªÉm")
    
    hr_score = get_hr_score(params['heart_rate'])
    aps += hr_score
    details.append(f"Nh·ªãp tim {params['heart_rate']:.0f} /min ‚Üí {hr_score} ƒëi·ªÉm")
    
    rr_score = get_rr_score(params['respiratory_rate'])
    aps += rr_score
    details.append(f"Nh·ªãp th·ªü {params['respiratory_rate']:.0f} /min ‚Üí {rr_score} ƒëi·ªÉm")
    
    oxy_score = get_oxygenation_score(
        params['fio2'], params['pao2'], params['paco2'], params['ph']
    )
    aps += oxy_score
    if params['fio2'] >= 50:
        details.append(f"A-a gradient (FiO‚ÇÇ ‚â•50%) ‚Üí {oxy_score} ƒëi·ªÉm")
    else:
        details.append(f"PaO‚ÇÇ {params['pao2']:.0f} mmHg ‚Üí {oxy_score} ƒëi·ªÉm")
    
    ph_score = get_ph_score(params['ph'])
    aps += ph_score
    details.append(f"pH {params['ph']:.2f} ‚Üí {ph_score} ƒëi·ªÉm")
    
    na_score = get_na_score(params['sodium'])
    aps += na_score
    details.append(f"Na {params['sodium']:.0f} mEq/L ‚Üí {na_score} ƒëi·ªÉm")
    
    k_score = get_k_score(params['potassium'])
    aps += k_score
    details.append(f"K {params['potassium']:.1f} mEq/L ‚Üí {k_score} ƒëi·ªÉm")
    
    cr_score = get_cr_score(params['creatinine'], params['has_arf'])
    aps += cr_score
    arf_note = " (√ó2 v√¨ ARF)" if params['has_arf'] else ""
    details.append(f"Creatinine {params['creatinine']:.1f} mg/dL ‚Üí {cr_score} ƒëi·ªÉm{arf_note}")
    
    hct_score = get_hct_score(params['hematocrit'])
    aps += hct_score
    details.append(f"Hematocrit {params['hematocrit']:.1f}% ‚Üí {hct_score} ƒëi·ªÉm")
    
    wbc_score = get_wbc_score(params['wbc'])
    aps += wbc_score
    details.append(f"WBC {params['wbc']:.1f} √ó10¬≥/ŒºL ‚Üí {wbc_score} ƒëi·ªÉm")
    
    gcs_score = get_gcs_score(params['gcs'])
    aps += gcs_score
    details.append(f"GCS {params['gcs']} ‚Üí {gcs_score} ƒëi·ªÉm (15 - GCS)")
    
    # Age points
    age_points = get_age_score(params['age'])
    details.append(f"Tu·ªïi {params['age']} ‚Üí {age_points} ƒëi·ªÉm")
    
    # Chronic health points
    chronic_points = get_chronic_health_score(
        params['has_chronic_health'],
        params['is_post_emergency_surgery'],
        params['is_nonsurgical']
    )
    if chronic_points > 0:
        details.append(f"B·ªánh m·∫°n t√≠nh ‚Üí {chronic_points} ƒëi·ªÉm")
    
    # Total score
    total_score = aps + age_points + chronic_points
    
    # Predicted mortality (from original APACHE II study)
    # ln(R/(1-R)) = -3.517 + (APACHE II √ó 0.146)
    logit = -3.517 + (total_score * 0.146)
    predicted_mortality = 100 / (1 + math.exp(-logit))
    
    # Interpretation
    if total_score < 10:
        interpretation = "M·ª©c ƒë·ªô n·∫∑ng TH·∫§P"
        mortality_range = "<10%"
        color = "üü¢"
    elif total_score < 15:
        interpretation = "M·ª©c ƒë·ªô n·∫∑ng TRUNG B√åNH"
        mortality_range = "10-25%"
        color = "üü°"
    elif total_score < 20:
        interpretation = "M·ª©c ƒë·ªô n·∫∑ng CAO"
        mortality_range = "25-40%"
        color = "üü†"
    elif total_score < 25:
        interpretation = "M·ª©c ƒë·ªô n·∫∑ng R·∫§T CAO"
        mortality_range = "40-55%"
        color = "üü†"
    else:
        interpretation = "M·ª©c ƒë·ªô n·∫∑ng C·ª∞C K·ª≤ CAO"
        mortality_range = ">55%"
        color = "üî¥"
    
    return {
        'total_score': total_score,
        'aps': aps,
        'age_points': age_points,
        'chronic_points': chronic_points,
        'predicted_mortality': predicted_mortality,
        'mortality_range': mortality_range,
        'interpretation': interpretation,
        'color': color,
        'details': details
    }


def render():
    """Render APACHE II calculator"""
    
    st.title("üè• APACHE II Score")
    st.markdown("**Acute Physiology and Chronic Health Evaluation II - D·ª± ƒëo√°n t·ª≠ vong ICU**")
    
    # Educational information
    with st.expander("‚ÑπÔ∏è Th√¥ng Tin & C√°ch S·ª≠ D·ª•ng"):
        st.markdown("""
        ### üìã Gi·ªõi Thi·ªáu
        
        **APACHE II** l√† thang ƒëi·ªÉm ICU:
        - D·ª± ƒëo√°n t·ª≠ vong b·ªánh vi·ªán
        - ƒê√°nh gi√° m·ª©c ƒë·ªô n·∫∑ng
        - So s√°nh ch·∫•t l∆∞·ª£ng chƒÉm s√≥c ICU
        - Nghi√™n c·ª©u & ph√¢n t·∫ßng b·ªánh nh√¢n
        
        ### üéØ 3 Th√†nh Ph·∫ßn
        
        1. **Acute Physiology Score (0-60):** 12 bi·∫øn s·ªë sinh l√Ω
        2. **Age Points (0-6):** ƒêi·ªÉm tu·ªïi
        3. **Chronic Health (0-5):** B·ªánh m·∫°n t√≠nh
        
        **T·ªïng ƒëi·ªÉm:** 0-71
        
        ### üìä ƒêi·ªÉm & T·ª≠ Vong
        
        | APACHE II | T·ª≠ Vong |
        |-----------|---------|
        | 0-4 | 4% |
        | 5-9 | 8% |
        | 10-14 | 15% |
        | 15-19 | 25% |
        | 20-24 | 40% |
        | 25-29 | 55% |
        | 30-34 | 73% |
        | ‚â•35 | 85% |
        
        ### ‚ö†Ô∏è L∆∞u √ù
        
        - T√≠nh trong 24h ƒê·∫¶U nh·∫≠p ICU
        - L·∫•y gi√° tr·ªã T·ªÜ NH·∫§T trong 24h
        - Kh√¥ng t√≠nh l·∫°i trong ICU stay
        
        ### üìö Tham Kh·∫£o
        
        - Knaus WA, et al. *Crit Care Med* 1985;13:818-829
        """)
    
    st.divider()
    
    st.subheader("üìù Nh·∫≠p D·ªØ Li·ªáu (Gi√° tr·ªã T·ªÜ NH·∫§T trong 24h ƒë·∫ßu ICU)")
    
    # Demographics
    st.markdown("#### üë§ Th√¥ng Tin Chung")
    col1, col2 = st.columns(2)
    with col1:
        age = st.number_input("Tu·ªïi", 0, 120, 50, 1)
    with col2:
        gcs = st.number_input("GCS (Glasgow Coma Scale)", 3, 15, 15, 1)
    
    st.divider()
    
    # Vital signs
    st.markdown("#### ü©∫ Sinh Hi·ªáu")
    col3, col4, col5 = st.columns(3)
    with col3:
        temperature = st.number_input("Nhi·ªát ƒë·ªô (¬∞C)", 20.0, 45.0, 37.0, 0.1)
    with col4:
        map_val = st.number_input("MAP (mmHg)", 0.0, 250.0, 70.0, 1.0)
        st.caption("MAP = (SBP + 2√óDBP)/3")
    with col5:
        heart_rate = st.number_input("Nh·ªãp tim (/min)", 0.0, 250.0, 80.0, 1.0)
    
    respiratory_rate = st.number_input("Nh·ªãp th·ªü (/min)", 0.0, 70.0, 16.0, 1.0)
    
    st.divider()
    
    # ABG
    st.markdown("#### ü´Å Kh√≠ M√°u ƒê·ªông M·∫°ch (ABG)")
    col6, col7, col8 = st.columns(3)
    with col6:
        fio2 = st.number_input("FiO‚ÇÇ (%)", 21.0, 100.0, 21.0, 1.0)
    with col7:
        pao2 = st.number_input("PaO‚ÇÇ (mmHg)", 0.0, 700.0, 100.0, 1.0)
    with col8:
        paco2 = st.number_input("PaCO‚ÇÇ (mmHg)", 0.0, 150.0, 40.0, 1.0)
    
    ph = st.number_input("pH", 6.5, 8.0, 7.40, 0.01)
    
    st.divider()
    
    # Labs
    st.markdown("#### üî¨ X√©t Nghi·ªám")
    col9, col10 = st.columns(2)
    with col9:
        sodium = st.number_input("Sodium (mEq/L)", 80.0, 200.0, 140.0, 1.0)
        potassium = st.number_input("Potassium (mEq/L)", 1.5, 10.0, 4.0, 0.1)
        creatinine = st.number_input("Creatinine (mg/dL)", 0.0, 20.0, 1.0, 0.1)
        has_arf = st.checkbox("**Suy th·∫≠n c·∫•p (ARF)** - nh√¢n ƒë√¥i ƒëi·ªÉm Cr")
    
    with col10:
        hematocrit = st.number_input("Hematocrit (%)", 0.0, 80.0, 40.0, 0.1)
        wbc = st.number_input("WBC (√ó10¬≥/ŒºL)", 0.0, 100.0, 10.0, 0.1)
    
    st.divider()
    
    # Chronic health
    st.markdown("#### üè• B·ªánh M·∫°n T√≠nh")
    has_chronic_health = st.checkbox(
        "**C√≥ b·ªánh m·∫°n t√≠nh n·∫∑ng**",
        help="Suy tim NYHA IV, COPD n·∫∑ng, x∆° gan Child C, HD l√¢u d√†i, immunocompromised"
    )
    
    if has_chronic_health:
        col11, col12 = st.columns(2)
        with col11:
            is_nonsurgical = st.checkbox("B·ªánh nh√¢n n·ªôi khoa (nonsurgical)")
        with col12:
            is_post_emergency_surgery = st.checkbox("Sau ph·∫´u thu·∫≠t c·∫•p c·ª©u")
    else:
        is_nonsurgical = False
        is_post_emergency_surgery = False
    
    st.divider()
    
    # Calculate
    if st.button("üßÆ T√≠nh APACHE II Score", type="primary", use_container_width=True):
        params = {
            'age': age,
            'temperature': temperature,
            'map': map_val,
            'heart_rate': heart_rate,
            'respiratory_rate': respiratory_rate,
            'fio2': fio2,
            'pao2': pao2,
            'paco2': paco2,
            'ph': ph,
            'sodium': sodium,
            'potassium': potassium,
            'creatinine': creatinine,
            'has_arf': has_arf,
            'hematocrit': hematocrit,
            'wbc': wbc,
            'gcs': gcs,
            'has_chronic_health': has_chronic_health,
            'is_post_emergency_surgery': is_post_emergency_surgery,
            'is_nonsurgical': is_nonsurgical
        }
        
        result = calculate_apache2(params)
        
        # Display results
        st.subheader("üìä K·∫øt Qu·∫£")
        
        col_r1, col_r2, col_r3 = st.columns(3)
        
        with col_r1:
            st.metric("**APACHE II**", f"{result['total_score']}")
            st.caption("0-71 (cao = n·∫∑ng)")
        
        with col_r2:
            st.metric("**T·ª≠ Vong D·ª± ƒêo√°n**", f"{result['predicted_mortality']:.1f}%")
            st.caption(f"Kho·∫£ng: {result['mortality_range']}")
        
        with col_r3:
            st.markdown(f"### {result['color']}")
            st.markdown(f"**{result['interpretation']}**")
        
        # Score breakdown
        with st.expander("üìã Chi Ti·∫øt ƒêi·ªÉm S·ªë", expanded=True):
            st.markdown(f"""
            - **Acute Physiology Score (APS):** {result['aps']}/60 ƒëi·ªÉm
            - **Age Points:** {result['age_points']}/6 ƒëi·ªÉm
            - **Chronic Health Points:** {result['chronic_points']}/5 ƒëi·ªÉm
            - **T·ªîNG:** {result['total_score']}/71 ƒëi·ªÉm
            """)
            
            st.markdown("---")
            st.markdown("**Chi ti·∫øt t·ª´ng bi·∫øn s·ªë:**")
            for detail in result['details']:
                st.markdown(f"- {detail}")
        
        # Interpretation
        st.info("""
        **üìå Di·ªÖn Gi·∫£i:**
        
        - APACHE II d·ª± ƒëo√°n t·ª≠ vong B·ªÜNH VI·ªÜN, kh√¥ng ph·∫£i ICU
        - T√≠nh 1 L·∫¶N trong 24h ƒë·∫ßu nh·∫≠p ICU (gi√° tr·ªã t·ªá nh·∫•t)
        - ƒêi·ªÉm c√†ng cao ‚Üí nguy c∆° t·ª≠ vong c√†ng cao
        - Kh√¥ng n√™n t√≠nh l·∫°i trong th·ªùi gian n·∫±m ICU
        """)
        
        if result['total_score'] >= 25:
            st.error("""
            **üö® APACHE II SCORE R·∫§T CAO:**
            
            - Nguy c∆° t·ª≠ vong >40%
            - C·∫ßn h·ªìi s·ª©c t√≠ch c·ª±c
            - Xem x√©t m·ª©c ƒë·ªô chƒÉm s√≥c v√† ti√™n l∆∞·ª£ng
            - Th·∫£o lu·∫≠n v·ªõi gia ƒë√¨nh v·ªÅ m·ª•c ti√™u ƒëi·ªÅu tr·ªã
            """)
        
        st.warning("""
        ‚ö†Ô∏è **L∆∞u √ù:**
        - APACHE II ch·ªâ l√† ∆∞·ªõc t√≠nh, kh√¥ng ch√≠nh x√°c 100%
        - Nhi·ªÅu y·∫øu t·ªë kh√°c ·∫£nh h∆∞·ªüng ti√™n l∆∞·ª£ng (b·ªánh n·ªÅn, ƒëi·ªÅu tr·ªã, bi·∫øn ch·ª©ng)
        - Quy·∫øt ƒë·ªãnh ƒëi·ªÅu tr·ªã d·ª±a tr√™n ƒë√°nh gi√° l√¢m s√†ng to√†n di·ªán
        """)
        
        st.session_state['apache2_result'] = result
    
    # Reference table
    with st.expander("üìñ B·∫£ng Tham Kh·∫£o APACHE II Scoring"):
        st.markdown("""
        ### APACHE II Chi Ti·∫øt
        
        Xem t√†i li·ªáu g·ªëc Knaus et al. 1985 cho b·∫£ng scoring ƒë·∫ßy ƒë·ªß c·ªßa 12 bi·∫øn s·ªë.
        
        ### Chronic Health Criteria
        
        **B·ªánh m·∫°n t√≠nh n·∫∑ng** bao g·ªìm:
        - Suy tim NYHA Class IV
        - COPD n·∫∑ng (FEV1 <25%, PaCO2 >50, pO2 <55, ho·∫∑c polycythemia)
        - X∆° gan Child-Pugh C (c·ªï tr∆∞·ªõng, xu·∫•t huy·∫øt, encephalopathy)
        - L·ªçc m√°u m·∫°n t√≠nh
        - Immunocompromised (HIV, chemo, corticosteroid)
        
        **ƒêi·ªÉm:**
        - Nonsurgical ho·∫∑c emergency post-op: **5 ƒëi·ªÉm**
        - Elective post-op: **2 ƒëi·ªÉm**
        """)
