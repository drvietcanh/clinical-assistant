"""
PSI/PORT Score (Pneumonia Severity Index)
ƒê√°nh gi√° m·ª©c ƒë·ªô n·∫∑ng vi√™m ph·ªïi c·ªông ƒë·ªìng
"""

import streamlit as st


def render():
    """PSI/PORT Score Calculator"""
    st.subheader("ü´Å PSI/PORT Score")
    st.caption("Pneumonia Severity Index - Ch·ªâ S·ªë M·ª©c ƒê·ªô N·∫∑ng Vi√™m Ph·ªïi")
    
    st.info("""
    **PSI/PORT Score** ƒë√°nh gi√° nguy c∆° t·ª≠ vong 30 ng√†y ·ªü b·ªánh nh√¢n vi√™m ph·ªïi c·ªông ƒë·ªìng.
    
    - Ph·ª©c t·∫°p h∆°n CURB-65 nh∆∞ng ch√≠nh x√°c h∆°n
    - D·ª±a tr√™n 20 bi·∫øn s·ªë l√¢m s√†ng, x√©t nghi·ªám, X-quang
    """)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìã Th√¥ng Tin B·ªánh Nh√¢n")
        
        # Demographics
        age = st.number_input(
            "Tu·ªïi",
            min_value=0,
            max_value=120,
            value=50,
            step=1,
            help="Tu·ªïi t√≠nh b·∫±ng nƒÉm"
        )
        
        gender = st.radio(
            "Gi·ªõi t√≠nh:",
            ["Nam", "N·ªØ"],
            horizontal=True
        )
        
        nursing_home = st.checkbox(
            "C∆∞ tr√∫ t·∫°i nh√† d∆∞·ª°ng l√£o",
            help="+10 ƒëi·ªÉm"
        )
        
        st.markdown("---")
        st.markdown("### üè• B·ªánh L√Ω N·ªÅn")
        
        neoplastic = st.checkbox(
            "B·ªánh ung th∆∞",
            help="Ung th∆∞ ho·∫°t ƒë·ªông ho·∫∑c ch·∫©n ƒëo√°n trong nƒÉm qua (+30 ƒëi·ªÉm)"
        )
        
        liver = st.checkbox(
            "B·ªánh gan",
            help="X∆° gan ho·∫∑c b·ªánh gan m·∫°n t√≠nh (+20 ƒëi·ªÉm)"
        )
        
        chf = st.checkbox(
            "Suy tim sung huy·∫øt",
            help="Ti·ªÅn s·ª≠ suy tim (+10 ƒëi·ªÉm)"
        )
        
        cvd = st.checkbox(
            "B·ªánh m·∫°ch m√°u n√£o",
            help="Ti·ªÅn s·ª≠ ƒë·ªôt qu·ªµ, TIA (+10 ƒëi·ªÉm)"
        )
        
        renal = st.checkbox(
            "B·ªánh th·∫≠n",
            help="Ti·ªÅn s·ª≠ b·ªánh th·∫≠n m·∫°n (+10 ƒëi·ªÉm)"
        )
        
        st.markdown("---")
        st.markdown("### üå°Ô∏è Tri·ªáu Ch·ª©ng L√¢m S√†ng")
        
        altered_mental = st.checkbox(
            "R·ªëi lo·∫°n √Ω th·ª©c",
            help="L√∫ l·∫´n, l∆° m∆°, ƒë·ªãnh h∆∞·ªõng k√©m (+20 ƒëi·ªÉm)"
        )
        
        resp_rate = st.number_input(
            "Nh·ªãp th·ªü (l·∫ßn/ph√∫t)",
            min_value=0,
            max_value=60,
            value=18,
            step=1,
            help="‚â•30/ph√∫t: +20 ƒëi·ªÉm"
        )
        
        sbp = st.number_input(
            "Huy·∫øt √°p t√¢m thu (mmHg)",
            min_value=0,
            max_value=300,
            value=120,
            step=5,
            help="<90 mmHg: +20 ƒëi·ªÉm"
        )
        
        temp_c = st.number_input(
            "Nhi·ªát ƒë·ªô (¬∞C)",
            min_value=35.0,
            max_value=42.0,
            value=37.0,
            step=0.1,
            help="<35¬∞C ho·∫∑c ‚â•40¬∞C: +15 ƒëi·ªÉm"
        )
        
        pulse = st.number_input(
            "M·∫°ch (l·∫ßn/ph√∫t)",
            min_value=0,
            max_value=200,
            value=80,
            step=5,
            help="‚â•125/ph√∫t: +10 ƒëi·ªÉm"
        )
        
        st.markdown("---")
        st.markdown("### üî¨ X√©t Nghi·ªám")
        
        # pH with unit conversion (arterial pH)
        ph = st.number_input(
            "pH m√°u ƒë·ªông m·∫°ch",
            min_value=6.8,
            max_value=7.8,
            value=7.4,
            step=0.01,
            help="<7.35: +30 ƒëi·ªÉm"
        )
        
        # BUN with unit conversion
        st.markdown("#### Urea (BUN)")
        bun_unit = st.radio(
            "ƒê∆°n v·ªã:",
            ["mmol/L (SI - M·∫∑c ƒë·ªãnh)", "mg/dL"],
            horizontal=True,
            key="bun_unit_psi"
        )
        
        if "mmol/L" in bun_unit:
            bun_input = st.number_input(
                "Urea (mmol/L)",
                min_value=0.0,
                max_value=70.0,
                value=5.0,
                step=0.5,
                help="B√¨nh th∆∞·ªùng: 2.5-7.1 mmol/L",
                key="bun_mmol"
            )
            bun_mgdl = bun_input * 2.8  # Convert to mg/dL for scoring
            st.caption(f"‚âà {bun_mgdl:.1f} mg/dL")
        else:
            bun_mgdl = st.number_input(
                "BUN (mg/dL)",
                min_value=0.0,
                max_value=200.0,
                value=15.0,
                step=1.0,
                help="B√¨nh th∆∞·ªùng: 7-20 mg/dL",
                key="bun_mgdl"
            )
            st.caption(f"‚âà {bun_mgdl/2.8:.1f} mmol/L")
        
        # Sodium
        sodium = st.number_input(
            "Natri (Na) - mEq/L = mmol/L",
            min_value=100.0,
            max_value=180.0,
            value=140.0,
            step=1.0,
            help="<130 mEq/L: +20 ƒëi·ªÉm"
        )
        
        # Glucose with unit conversion
        st.markdown("#### Glucose")
        glucose_unit = st.radio(
            "ƒê∆°n v·ªã:",
            ["mmol/L (SI - M·∫∑c ƒë·ªãnh)", "mg/dL"],
            horizontal=True,
            key="glucose_unit_psi"
        )
        
        if "mmol/L" in glucose_unit:
            glucose_input = st.number_input(
                "Glucose (mmol/L)",
                min_value=0.0,
                max_value=33.0,
                value=5.5,
                step=0.1,
                help="B√¨nh th∆∞·ªùng: 3.9-5.6 mmol/L",
                key="glucose_mmol"
            )
            glucose_mgdl = glucose_input * 18.0
            st.caption(f"‚âà {glucose_mgdl:.0f} mg/dL")
        else:
            glucose_mgdl = st.number_input(
                "Glucose (mg/dL)",
                min_value=0.0,
                max_value=600.0,
                value=100.0,
                step=5.0,
                help="B√¨nh th∆∞·ªùng: 70-100 mg/dL",
                key="glucose_mgdl"
            )
            st.caption(f"‚âà {glucose_mgdl/18.0:.1f} mmol/L")
        
        # Hematocrit
        hct = st.number_input(
            "Hematocrit (%)",
            min_value=0.0,
            max_value=70.0,
            value=42.0,
            step=0.5,
            help="<30%: +10 ƒëi·ªÉm"
        )
        
        # PaO2 with unit conversion
        st.markdown("#### PaO2 (Oxy m√°u ƒë·ªông m·∫°ch)")
        pao2_unit = st.radio(
            "ƒê∆°n v·ªã:",
            ["mmHg", "kPa"],
            horizontal=True,
            key="pao2_unit"
        )
        
        if pao2_unit == "mmHg":
            pao2_input = st.number_input(
                "PaO2 (mmHg)",
                min_value=0.0,
                max_value=150.0,
                value=90.0,
                step=1.0,
                help="B√¨nh th∆∞·ªùng: 80-100 mmHg",
                key="pao2_mmhg"
            )
            pao2_mmhg = pao2_input
            st.caption(f"‚âà {pao2_mmhg/7.5:.1f} kPa")
        else:
            pao2_input = st.number_input(
                "PaO2 (kPa)",
                min_value=0.0,
                max_value=20.0,
                value=12.0,
                step=0.1,
                help="B√¨nh th∆∞·ªùng: 10.7-13.3 kPa",
                key="pao2_kpa"
            )
            pao2_mmhg = pao2_input * 7.5
            st.caption(f"‚âà {pao2_mmhg:.0f} mmHg")
        
        # Pleural effusion
        pleural_effusion = st.checkbox(
            "Tr√†n d·ªãch m√†ng ph·ªïi (tr√™n X-quang)",
            help="+10 ƒëi·ªÉm"
        )
        
        st.markdown("---")
        
        if st.button("üßÆ T√≠nh PSI/PORT Score", type="primary", use_container_width=True):
            # Calculate score
            score = 0
            details = []
            
            # Age
            if gender == "Nam":
                age_points = age
                details.append(f"Tu·ªïi (Nam): {age} ƒëi·ªÉm")
            else:
                age_points = age - 10
                details.append(f"Tu·ªïi (N·ªØ): {age} - 10 = {age_points} ƒëi·ªÉm")
            score += age_points
            
            # Nursing home
            if nursing_home:
                score += 10
                details.append("Nh√† d∆∞·ª°ng l√£o: +10")
            
            # Comorbidities
            if neoplastic:
                score += 30
                details.append("Ung th∆∞: +30")
            if liver:
                score += 20
                details.append("B·ªánh gan: +20")
            if chf:
                score += 10
                details.append("Suy tim: +10")
            if cvd:
                score += 10
                details.append("B·ªánh m·∫°ch m√°u n√£o: +10")
            if renal:
                score += 10
                details.append("B·ªánh th·∫≠n: +10")
            
            # Physical exam
            if altered_mental:
                score += 20
                details.append("R·ªëi lo·∫°n √Ω th·ª©c: +20")
            if resp_rate >= 30:
                score += 20
                details.append(f"Nh·ªãp th·ªü ‚â•30 ({resp_rate}): +20")
            if sbp < 90:
                score += 20
                details.append(f"HA t√¢m thu <90 ({sbp}): +20")
            if temp_c < 35 or temp_c >= 40:
                score += 15
                details.append(f"Nhi·ªát ƒë·ªô b·∫•t th∆∞·ªùng ({temp_c}¬∞C): +15")
            if pulse >= 125:
                score += 10
                details.append(f"M·∫°ch ‚â•125 ({pulse}): +10")
            
            # Labs
            if ph < 7.35:
                score += 30
                details.append(f"pH <7.35 ({ph:.2f}): +30")
            if bun_mgdl >= 30:
                score += 20
                details.append(f"BUN ‚â•30 mg/dL ({bun_mgdl:.1f}): +20")
            if sodium < 130:
                score += 20
                details.append(f"Na <130 ({sodium:.0f}): +20")
            if glucose_mgdl >= 250:
                score += 10
                details.append(f"Glucose ‚â•250 mg/dL ({glucose_mgdl:.0f}): +10")
            if hct < 30:
                score += 10
                details.append(f"Hct <30% ({hct:.1f}): +10")
            if pao2_mmhg < 60:
                score += 10
                details.append(f"PaO2 <60 mmHg ({pao2_mmhg:.0f}): +10")
            if pleural_effusion:
                score += 10
                details.append("Tr√†n d·ªãch m√†ng ph·ªïi: +10")
            
            # Determine risk class
            if score <= 50:
                risk_class = "I"
                mortality = "0.1%"
                recommendation = "ƒêi·ªÅu tr·ªã ngo·∫°i tr√∫"
                color = "success"
            elif score <= 70:
                risk_class = "II"
                mortality = "0.6%"
                recommendation = "ƒêi·ªÅu tr·ªã ngo·∫°i tr√∫"
                color = "success"
            elif score <= 90:
                risk_class = "III"
                mortality = "2.8%"
                recommendation = "C√¢n nh·∫Øc nh·∫≠p vi·ªán ng·∫Øn ng√†y"
                color = "info"
            elif score <= 130:
                risk_class = "IV"
                mortality = "8.2%"
                recommendation = "Nh·∫≠p vi·ªán"
                color = "warning"
            else:
                risk_class = "V"
                mortality = "29.2%"
                recommendation = "Nh·∫≠p vi·ªán/ICU"
                color = "error"
            
            with col2:
                st.markdown("### üìä K·∫øt Qu·∫£")
                
                if color == "success":
                    st.success(f"## PSI Score: {score}")
                    st.success(f"**Class {risk_class}**")
                elif color == "info":
                    st.info(f"## PSI Score: {score}")
                    st.info(f"**Class {risk_class}**")
                elif color == "warning":
                    st.warning(f"## PSI Score: {score}")
                    st.warning(f"**Class {risk_class}**")
                else:
                    st.error(f"## PSI Score: {score}")
                    st.error(f"**Class {risk_class}**")
                
                st.markdown(f"""
                **T·ª∑ l·ªá t·ª≠ vong 30 ng√†y:** {mortality}
                
                **Khuy·∫øn c√°o:** {recommendation}
                """)
            
            st.markdown("---")
            st.markdown("### üí° Chi Ti·∫øt T√≠nh ƒêi·ªÉm")
            
            with st.expander("Xem chi ti·∫øt"):
                for d in details:
                    st.write(f"‚Ä¢ {d}")
                st.markdown(f"**T·ªïng ƒëi·ªÉm: {score}**")
            
            st.markdown("---")
            st.markdown("### üíä Khuy·∫øn C√°o ƒêi·ªÅu Tr·ªã")
            
            if risk_class in ["I", "II"]:
                st.success(f"""
                **Class {risk_class} - Nguy c∆° r·∫•t th·∫•p ({mortality})**
                
                **ƒêi·ªÅu tr·ªã ngo·∫°i tr√∫:**
                - Kh√°ng sinh ƒë∆∞·ªùng u·ªëng
                - Amoxicillin/Clavulanate ho·∫∑c Macrolide
                - Theo d√µi t·∫°i nh√†
                - T√°i kh√°m sau 2-3 ng√†y
                """)
            elif risk_class == "III":
                st.info(f"""
                **Class {risk_class} - Nguy c∆° th·∫•p ({mortality})**
                
                **C√¢n nh·∫Øc nh·∫≠p vi·ªán ng·∫Øn ng√†y:**
                - ƒê√°nh gi√° y·∫øu t·ªë x√£ h·ªôi
                - Kh·∫£ nƒÉng tu√¢n th·ªß ƒëi·ªÅu tr·ªã
                - C√≥ th·ªÉ ƒëi·ªÅu tr·ªã ngo·∫°i tr√∫ n·∫øu ·ªïn ƒë·ªãnh
                - Kh√°ng sinh PO ho·∫∑c IV ng·∫Øn ng√†y
                """)
            elif risk_class == "IV":
                st.warning(f"""
                **Class {risk_class} - Nguy c∆° trung b√¨nh ({mortality})**
                
                **Nh·∫≠p vi·ªán:**
                - Kh√°ng sinh IV
                - Beta-lactam + Macrolide
                - H·ªó tr·ª£ oxy n·∫øu c·∫ßn
                - Theo d√µi s√°t
                - ƒêi·ªÅu tr·ªã √≠t nh·∫•t 24-48h IV
                """)
            else:
                st.error(f"""
                **Class {risk_class} - Nguy c∆° cao ({mortality})**
                
                **Nh·∫≠p vi·ªán/ICU ngay:**
                - Kh√°ng sinh IV broad-spectrum
                - Ceftriaxone + Azithromycin
                - H·ªó tr·ª£ h√¥ h·∫•p
                - Xem x√©t ICU n·∫øu:
                  - C·∫ßn th·ªü m√°y
                  - C·∫ßn vasopressor
                  - Septic shock
                """)
            
            with st.expander("üìö T√†i Li·ªáu Tham Kh·∫£o"):
                st.markdown(f"""
                **PSI/PORT Score - Pneumonia Severity Index**
                
                **Risk Classes & T·ª∑ l·ªá t·ª≠ vong 30 ng√†y:**
                
                | Class | ƒêi·ªÉm | T·ª≠ vong | Khuy·∫øn c√°o |
                |-------|------|---------|------------|
                | I | ‚â§50 | 0.1% | Ngo·∫°i tr√∫ |
                | II | 51-70 | 0.6% | Ngo·∫°i tr√∫ |
                | III | 71-90 | 2.8% | Ng·∫Øn ng√†y/Ngo·∫°i tr√∫ |
                | IV | 91-130 | 8.2% | Nh·∫≠p vi·ªán |
                | V | >130 | 29.2% | Nh·∫≠p vi·ªán/ICU |
                
                **K·∫øt qu·∫£ c·ªßa b·∫°n:** Class {risk_class} ({score} ƒëi·ªÉm) - {mortality} t·ª≠ vong
                
                **∆Øu ƒëi·ªÉm:**
                - Ch√≠nh x√°c cao h∆°n CURB-65
                - D·ª±a tr√™n nhi·ªÅu bi·∫øn s·ªë l√¢m s√†ng v√† x√©t nghi·ªám
                - Validated trong nhi·ªÅu nghi√™n c·ª©u l·ªõn
                
                **Nh∆∞·ª£c ƒëi·ªÉm:**
                - Ph·ª©c t·∫°p, c·∫ßn nhi·ªÅu x√©t nghi·ªám
                - M·∫•t th·ªùi gian
                - C√≥ th·ªÉ kh√¥ng ph√π h·ª£p c·∫•p c·ª©u
                
                **Reference:**
                Fine MJ, et al. A prediction rule to identify low-risk patients with community-acquired pneumonia. N Engl J Med. 1997;336(4):243-250.
                
                **Guidelines:**
                - IDSA/ATS CAP Guidelines (2019)
                - BTS Guidelines (2009)
                """)


