"""
QTc - Corrected QT Interval Calculator
T√≠nh QT ƒëi·ªÅu ch·ªânh theo nh·ªãp tim
"""

import streamlit as st
import math


def calculate_qtc_bazett(qt_ms, hr):
    """
    Calculate QTc using Bazett's formula (most common)
    QTc = QT / ‚àöRR
    
    Args:
        qt_ms: QT interval in milliseconds
        hr: Heart rate in bpm
    
    Returns:
        float: QTc in milliseconds
    """
    rr_sec = 60 / hr
    qtc = qt_ms / math.sqrt(rr_sec)
    return qtc


def calculate_qtc_fridericia(qt_ms, hr):
    """
    Calculate QTc using Fridericia's formula
    QTc = QT / ‚àõRR
    More accurate at extreme heart rates
    
    Args:
        qt_ms: QT interval in milliseconds
        hr: Heart rate in bpm
    
    Returns:
        float: QTc in milliseconds
    """
    rr_sec = 60 / hr
    qtc = qt_ms / (rr_sec ** (1/3))
    return qtc


def calculate_qtc_framingham(qt_ms, hr):
    """
    Calculate QTc using Framingham's formula
    QTc = QT + 154 √ó (1 - RR)
    
    Args:
        qt_ms: QT interval in milliseconds
        hr: Heart rate in bpm
    
    Returns:
        float: QTc in milliseconds
    """
    rr_sec = 60 / hr
    qtc = qt_ms + 154 * (1 - rr_sec)
    return qtc


def calculate_qtc_hodges(qt_ms, hr):
    """
    Calculate QTc using Hodges' formula
    QTc = QT + 1.75 √ó (HR - 60)
    
    Args:
        qt_ms: QT interval in milliseconds
        hr: Heart rate in bpm
    
    Returns:
        float: QTc in milliseconds
    """
    qtc = qt_ms + 1.75 * (hr - 60)
    return qtc


def interpret_qtc(qtc, gender):
    """
    Interpret QTc based on gender-specific cutoffs
    
    Args:
        qtc: QTc in milliseconds
        gender: "Nam" or "N·ªØ"
    
    Returns:
        dict: Interpretation results
    """
    if gender == "Nam":
        normal_upper = 450
        borderline = 450
        prolonged = 470
    else:  # N·ªØ
        normal_upper = 460
        borderline = 460
        prolonged = 480
    
    if qtc < normal_upper:
        return {
            "status": "B√¨nh th∆∞·ªùng",
            "color": "üü¢",
            "risk": "Nguy c∆° th·∫•p",
            "recommendation": "Kh√¥ng c·∫ßn can thi·ªáp ƒë·∫∑c bi·ªát",
            "severity": "normal"
        }
    elif qtc < prolonged:
        return {
            "status": "Gi·ªõi h·∫°n (Borderline)",
            "color": "üü°",
            "risk": "Nguy c∆° trung b√¨nh r·ªëi lo·∫°n nh·ªãp",
            "recommendation": "Theo d√µi, xem x√©t nguy√™n nh√¢n, ƒëi·ªÅu ch·ªânh thu·ªëc g√¢y k√©o d√†i QT",
            "severity": "borderline"
        }
    elif qtc < 500:
        return {
            "status": "K√©o d√†i",
            "color": "üü†",
            "risk": "Nguy c∆° cao Torsades de Pointes",
            "recommendation": "C·∫ßn can thi·ªáp: D·ª´ng thu·ªëc g√¢y k√©o d√†i QT, ƒëi·ªÅu ch·ªânh ƒëi·ªán gi·∫£i, theo d√µi s√°t",
            "severity": "prolonged"
        }
    else:
        return {
            "status": "K√©o d√†i nghi√™m tr·ªçng",
            "color": "üî¥",
            "risk": "Nguy c∆° r·∫•t cao ƒë·ªôt t·ª≠ do r·ªëi lo·∫°n nh·ªãp",
            "recommendation": "C·∫§P C·ª®U: D·ª´ng ngay thu·ªëc g√¢y k√©o d√†i QT, ƒëi·ªÅu ch·ªânh K+/Mg2+, c√¢n nh·∫Øc pacing t·∫°m th·ªùi",
            "severity": "severe"
        }


def get_qtc_prolonging_drugs():
    """Return common QT-prolonging drugs by category"""
    return {
        "Kh√°ng sinh": [
            "Macrolides (Azithromycin, Erythromycin, Clarithromycin)",
            "Fluoroquinolones (Moxifloxacin, Levofloxacin)",
            "Antifungals (Fluconazole, Voriconazole)"
        ],
        "Tim m·∫°ch": [
            "Amiodarone, Sotalol, Dronedarone",
            "Quinidine, Procainamide, Disopyramide",
            "Dofetilide, Ibutilide"
        ],
        "T√¢m th·∫ßn": [
            "Haloperidol, Droperidol",
            "Citalopram, Escitalopram",
            "Tricyclic antidepressants (Amitriptyline)",
            "Quetiapine, Ziprasidone"
        ],
        "Kh√°c": [
            "Methadone, Cocaine",
            "Ondansetron (li·ªÅu cao)",
            "Domperidone",
            "Hydroxychloroquine, Chloroquine"
        ]
    }


def calculate_rr_interval(hr):
    """Calculate RR interval from heart rate"""
    return 60 / hr


def render():
    """Render the QTc Calculator"""
    
    st.title("üíì QTc - Corrected QT Interval")
    st.markdown("""
    ### QT ƒêi·ªÅu Ch·ªânh Theo Nh·ªãp Tim
    
    **QT interval:**
    - Th·ªùi gian t·ª´ b·∫Øt ƒë·∫ßu s√≥ng Q ƒë·∫øn k·∫øt th√∫c s√≥ng T
    - Ph·∫£n √°nh t√°i c·ª±c c∆° tim
    - B·ªã ·∫£nh h∆∞·ªüng b·ªüi nh·ªãp tim
    
    **QTc (QT corrected):**
    - QT ƒëi·ªÅu ch·ªânh theo nh·ªãp tim
    - Cho ph√©p so s√°nh ·ªü c√°c nh·ªãp tim kh√°c nhau
    - Quan tr·ªçng ƒë·ªÉ ƒë√°nh gi√° nguy c∆° r·ªëi lo·∫°n nh·ªãp
    
    **√ù nghƒ©a l√¢m s√†ng:**
    - QTc k√©o d√†i ‚Üí Nguy c∆° Torsades de Pointes (TdP)
    - TdP ‚Üí C√≥ th·ªÉ ti·∫øn tri·ªÉn th√†nh VF ‚Üí ƒê·ªôt t·ª≠
    """)
    
    st.markdown("---")
    
    # Input section
    st.subheader("üìä Nh·∫≠p Th√¥ng S·ªë ECG")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # QT interval input
        qt_unit = st.radio(
            "**ƒê∆°n v·ªã QT:**",
            ["milliseconds (ms)", "seconds (s)"],
            horizontal=True
        )
        
        if qt_unit == "milliseconds (ms)":
            qt_input = st.number_input(
                "**QT Interval (ms)**",
                min_value=200.0,
                max_value=800.0,
                value=400.0,
                step=10.0,
                help="ƒêo t·ª´ ƒë·∫ßu s√≥ng Q ƒë·∫øn cu·ªëi s√≥ng T (b√¨nh th∆∞·ªùng: 350-450 ms)"
            )
            qt_ms = qt_input
        else:
            qt_input = st.number_input(
                "**QT Interval (s)**",
                min_value=0.20,
                max_value=0.80,
                value=0.40,
                step=0.01,
                help="ƒêo t·ª´ ƒë·∫ßu s√≥ng Q ƒë·∫øn cu·ªëi s√≥ng T (b√¨nh th∆∞·ªùng: 0.35-0.45 s)"
            )
            qt_ms = qt_input * 1000
        
        # Heart rate input
        hr = st.number_input(
            "**Nh·ªãp Tim (bpm)**",
            min_value=30,
            max_value=200,
            value=75,
            step=1,
            help="T·∫ßn s·ªë tim (b√¨nh th∆∞·ªùng: 60-100 bpm)"
        )
    
    with col2:
        # Gender selection
        gender = st.radio(
            "**Gi·ªõi t√≠nh:**",
            ["Nam", "N·ªØ"],
            help="Ng∆∞·ª°ng QTc b√¨nh th∆∞·ªùng kh√°c nhau theo gi·ªõi"
        )
        
        # Formula selection
        formula = st.selectbox(
            "**C√¥ng th·ª©c t√≠nh QTc:**",
            [
                "Bazett (Ph·ªï bi·∫øn nh·∫•t)",
                "Fridericia (Ch√≠nh x√°c h∆°n)",
                "Framingham (Linear)",
                "Hodges (Linear)"
            ],
            help="Bazett l√† ph·ªï bi·∫øn nh·∫•t nh∆∞ng k√©m ch√≠nh x√°c ·ªü nh·ªãp nhanh/ch·∫≠m"
        )
        
        # Display RR interval
        rr_interval = calculate_rr_interval(hr)
        st.metric(
            "RR Interval",
            f"{rr_interval:.3f} s",
            help="RR = 60 / HR"
        )
    
    if st.button("üìà T√≠nh QTc", type="primary", use_container_width=True):
        # Calculate QTc based on selected formula
        if "Bazett" in formula:
            qtc = calculate_qtc_bazett(qt_ms, hr)
            formula_text = "QTc = QT / ‚àöRR"
        elif "Fridericia" in formula:
            qtc = calculate_qtc_fridericia(qt_ms, hr)
            formula_text = "QTc = QT / ‚àõRR"
        elif "Framingham" in formula:
            qtc = calculate_qtc_framingham(qt_ms, hr)
            formula_text = "QTc = QT + 154 √ó (1 - RR)"
        else:  # Hodges
            qtc = calculate_qtc_hodges(qt_ms, hr)
            formula_text = "QTc = QT + 1.75 √ó (HR - 60)"
        
        # Get interpretation
        result = interpret_qtc(qtc, gender)
        
        st.markdown("---")
        st.subheader("üìà K·∫øt Qu·∫£")
        
        # Display metrics
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "QT Interval",
                f"{qt_ms:.0f} ms",
                help="QT ƒëo ƒë∆∞·ª£c t·ª´ ECG"
            )
        
        with col2:
            st.metric(
                "Nh·ªãp Tim",
                f"{hr} bpm",
                help="T·∫ßn s·ªë tim"
            )
        
        with col3:
            delta_color = "normal" if result['severity'] == "normal" else "inverse"
            st.metric(
                "QTc",
                f"{qtc:.0f} ms",
                delta=result['status'],
                delta_color=delta_color,
                help=f"S·ª≠ d·ª•ng c√¥ng th·ª©c {formula}"
            )
        
        st.info(f"**C√¥ng th·ª©c:** {formula_text}")
        
        st.markdown("---")
        
        # Interpretation
        st.subheader("üéØ Ph√¢n T√≠ch & ƒê√°nh Gi√°")
        
        if result['severity'] == "normal":
            st.success(f"""
            {result['color']} **{result['status']}**
            
            **QTc = {qtc:.0f} ms** (B√¨nh th∆∞·ªùng < {460 if gender == "N·ªØ" else 450} ms cho {gender})
            
            **ƒê√°nh gi√°:** {result['risk']}
            
            **Khuy·∫øn ngh·ªã:** {result['recommendation']}
            """)
        elif result['severity'] == "borderline":
            st.warning(f"""
            {result['color']} **{result['status']}**
            
            **QTc = {qtc:.0f} ms**
            
            **ƒê√°nh gi√°:** {result['risk']}
            
            **Khuy·∫øn ngh·ªã:** {result['recommendation']}
            """)
        else:
            st.error(f"""
            {result['color']} **{result['status']}**
            
            **QTc = {qtc:.0f} ms** - C·∫¢NH B√ÅO!
            
            **ƒê√°nh gi√°:** {result['risk']}
            
            **Khuy·∫øn ngh·ªã:** {result['recommendation']}
            """)
        
        # Reference values
        st.markdown("---")
        st.subheader("üìã Gi√° Tr·ªã Tham Chi·∫øu")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **Nam:**
            - B√¨nh th∆∞·ªùng: < 450 ms
            - Gi·ªõi h·∫°n: 450-469 ms
            - K√©o d√†i: 470-499 ms
            - Nghi√™m tr·ªçng: ‚â• 500 ms
            """)
        
        with col2:
            st.markdown("""
            **N·ªØ:**
            - B√¨nh th∆∞·ªùng: < 460 ms
            - Gi·ªõi h·∫°n: 460-479 ms
            - K√©o d√†i: 480-499 ms
            - Nghi√™m tr·ªçng: ‚â• 500 ms
            """)
        
        # QT prolonging drugs
        st.markdown("---")
        st.subheader("üíä Thu·ªëc G√¢y K√©o D√†i QT Th∆∞·ªùng G·∫∑p")
        
        drugs = get_qtc_prolonging_drugs()
        
        cols = st.columns(2)
        categories = list(drugs.keys())
        
        for idx, category in enumerate(categories):
            with cols[idx % 2]:
                st.markdown(f"**{category}:**")
                for drug in drugs[category]:
                    st.markdown(f"- {drug}")
        
        st.info("""
        ‚ö†Ô∏è **L∆∞u √Ω:** Danh s√°ch kh√¥ng ƒë·∫ßy ƒë·ªß. Ki·ªÉm tra t∆∞∆°ng t√°c thu·ªëc tr√™n:
        - CredibleMeds.org
        - Micromedex
        - UpToDate Drug Interactions
        """)
    
    # Educational content
    st.markdown("---")
    st.subheader("üìö Ki·∫øn Th·ª©c B·ªï Sung")
    
    with st.expander("üìê So S√°nh C√°c C√¥ng Th·ª©c QTc"):
        st.markdown("""
        ### 1. Bazett's Formula (1920) - Ph·ªï bi·∫øn nh·∫•t
        ```
        QTc = QT / ‚àöRR
        ```
        - **∆Øu ƒëi·ªÉm:** ƒê∆°n gi·∫£n, ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i
        - **Nh∆∞·ª£c ƒëi·ªÉm:** 
          + Overcorrect ·ªü nh·ªãp nhanh (‚Üí QTc gi·∫£ tƒÉng)
          + Undercorrect ·ªü nh·ªãp ch·∫≠m (‚Üí QTc gi·∫£ gi·∫£m)
        - **Khuy·∫øn c√°o:** S·ª≠ d·ª•ng khi HR 60-90 bpm
        
        ### 2. Fridericia's Formula (1920) - Ch√≠nh x√°c h∆°n
        ```
        QTc = QT / ‚àõRR
        ```
        - **∆Øu ƒëi·ªÉm:** Ch√≠nh x√°c h∆°n ·ªü nh·ªãp nhanh v√† ch·∫≠m
        - **Nh∆∞·ª£c ƒëi·ªÉm:** √çt ph·ªï bi·∫øn, √≠t nghi√™n c·ª©u
        - **Khuy·∫øn c√°o:** ∆Øu ti√™n ·ªü HR < 60 ho·∫∑c > 90 bpm
        
        ### 3. Framingham Formula (1992)
        ```
        QTc = QT + 154 √ó (1 - RR)
        ```
        - **∆Øu ƒëi·ªÉm:** Linear, d·ªÖ t√≠nh
        - **Nh∆∞·ª£c ƒëi·ªÉm:** √çt validation
        - **Khuy·∫øn c√°o:** Ph√π h·ª£p cho population studies
        
        ### 4. Hodges Formula (1983)
        ```
        QTc = QT + 1.75 √ó (HR - 60)
        ```
        - **∆Øu ƒëi·ªÉm:** ƒê∆°n gi·∫£n, linear
        - **Nh∆∞·ª£c ƒëi·ªÉm:** √çt s·ª≠ d·ª•ng trong practice
        - **Khuy·∫øn c√°o:** √çt khuy·∫øn c√°o
        
        **Khuy·∫øn ngh·ªã s·ª≠ d·ª•ng:**
        - **HR 60-90 bpm:** Bazett
        - **HR < 60 ho·∫∑c > 90 bpm:** Fridericia
        - **Nghi√™n c·ª©u:** B√°o c√°o c·∫£ Bazett v√† Fridericia
        """)
    
    with st.expander("üéØ C√°ch ƒêo QT Interval Ch√≠nh X√°c"):
        st.markdown("""
        ### K·ªπ thu·∫≠t ƒëo QT:
        
        **1. Ch·ªçn lead:**
        - Lead II ho·∫∑c V5/V6 (s√≥ng T r√µ nh·∫•t)
        - Tr√°nh lead c√≥ s√≥ng U l·ªõn
        - ƒêo ·ªü c√πng m·ªôt lead ƒë·ªÉ so s√°nh
        
        **2. X√°c ƒë·ªãnh ƒëi·ªÉm b·∫Øt ƒë·∫ßu (Q):**
        - B·∫Øt ƒë·∫ßu s√≥ng Q (n·∫øu c√≥)
        - Ho·∫∑c b·∫Øt ƒë·∫ßu s√≥ng R (n·∫øu kh√¥ng c√≥ Q)
        
        **3. X√°c ƒë·ªãnh ƒëi·ªÉm k·∫øt th√∫c (T):**
        - **Ph∆∞∆°ng ph√°p Tangent (Khuy·∫øn c√°o):**
          + V·∫Ω ti·∫øp tuy·∫øn ·ªü ƒë·ªô d·ªëc xu·ªëng l·ªõn nh·∫•t c·ªßa s√≥ng T
          + QT k·∫øt th√∫c khi ti·∫øp tuy·∫øn c·∫Øt ƒë∆∞·ªùng ƒë·∫≥ng ƒëi·ªán
        - **L∆∞u √Ω v·ªõi s√≥ng U:**
          + N·∫øu U < 50% amplitude c·ªßa T ‚Üí K·∫øt th√∫c ·ªü T
          + N·∫øu U l·ªõn v√† s√°t T ‚Üí ƒêo ƒë·∫øn nadir gi·ªØa T v√† U
        
        **4. T√≠nh trung b√¨nh:**
        - ƒêo √≠t nh·∫•t 3 nh·ªãp li√™n ti·∫øp
        - L·∫•y trung b√¨nh (ho·∫∑c trung v·ªã n·∫øu c√≥ outliers)
        
        **5. ƒêi·ªÅu ki·ªán ƒëo:**
        - Nh·ªãp xoang ƒë·ªÅu
        - Kh√¥ng c√≥ extrasystoles
        - QRS b√¨nh th∆∞·ªùng (< 120 ms)
        
        **QRS wide (‚â• 120 ms):**
        - D√πng c√¥ng th·ª©c ƒëi·ªÅu ch·ªânh:
          + **Bazett:** QTc = (QT - 155) / ‚àöRR + 155
          + **Hodges:** QTc = QT - (0.154 √ó QRS)
        """)
    
    with st.expander("‚ö†Ô∏è Nguy√™n Nh√¢n K√©o D√†i QT"):
        st.markdown("""
        ### Nguy√™n nh√¢n b·∫©m sinh:
        
        **Long QT Syndrome (LQTS):**
        - LQT1, LQT2, LQT3 (hay g·∫∑p nh·∫•t)
        - ƒê·ªôt bi·∫øn gen k√™nh ion
        - Ti·ªÅn s·ª≠ gia ƒë√¨nh ng·∫•t, ƒë·ªôt t·ª≠
        - Trigger: stress, b∆°i l·ªôi, √¢m thanh ƒë·ªôt ng·ªôt
        
        ### Nguy√™n nh√¢n m·∫Øc ph·∫£i:
        
        **1. Thu·ªëc (Ph·ªï bi·∫øn nh·∫•t):**
        - Xem b·∫£ng thu·ªëc ph√≠a tr√™n
        - T∆∞∆°ng t√°c thu·ªëc (CYP3A4 inhibitors)
        - Li·ªÅu cao, bolus IV
        
        **2. R·ªëi lo·∫°n ƒëi·ªán gi·∫£i:**
        - **H·∫° kali (Hypokalemia):** < 3.5 mmol/L
        - **H·∫° magie (Hypomagnesemia):** < 0.7 mmol/L
        - **H·∫° canxi (Hypocalcemia):** < 2.0 mmol/L
        
        **3. B·ªánh tim:**
        - Nh·ªìi m√°u c∆° tim c·∫•p
        - Cardiomyopathy (gi√£n, ph√¨ ƒë·∫°i)
        - Vi√™m c∆° tim
        - B·ªánh m·∫°ch v√†nh
        
        **4. R·ªëi lo·∫°n chuy·ªÉn h√≥a:**
        - Suy gi√°p (Hypothyroidism)
        - H·∫° ƒë∆∞·ªùng huy·∫øt
        - Nh·ªãn ƒë√≥i k√©o d√†i
        - Anorexia nervosa
        
        **5. Th·∫ßn kinh:**
        - Xu·∫•t huy·∫øt d∆∞·ªõi nh·ªán
        - TƒÉng √°p l·ª±c n·ªôi s·ªç
        - ƒê·ªôt qu·ªµ
        
        **6. Kh√°c:**
        - H·∫° th√¢n nhi·ªát
        - HIV/AIDS
        - X∆° gan
        - B·ªánh th·∫≠n m·∫°n
        """)
    
    with st.expander("üö® Torsades de Pointes (TdP)"):
        st.markdown("""
        ### Torsades de Pointes:
        
        **ƒê·∫∑c ƒëi·ªÉm:**
        - Nh·ªãp nhanh th·∫•t ƒëa h√¨nh
        - QRS "xo·∫Øn" quanh ƒë∆∞·ªùng ƒë·∫≥ng ƒëi·ªán
        - T·∫ßn s·ªë 200-250 bpm
        - Th∆∞·ªùng t·ª± gi·ªõi h·∫°n nh∆∞ng c√≥ th·ªÉ ‚Üí VF
        
        **Y·∫øu t·ªë nguy c∆° cao:**
        - QTc ‚â• 500 ms
        - N·ªØ gi·ªõi (g·∫•p 2-3 l·∫ßn nam)
        - Tu·ªïi cao
        - B·ªánh tim k√®m theo
        - H·∫° K+, H·∫° Mg2+
        - Nh·ªãp tim ch·∫≠m
        - K√©o d√†i QT b·∫©m sinh
        - Chuy·ªÉn ƒë·ªïi g·∫ßn ƒë√¢y t·ª´ AF v·ªÅ nh·ªãp xoang
        
        **Tri·ªáu ch·ª©ng:**
        - H·ªìi h·ªôp, cho√°ng v√°ng
        - Ng·∫•t (syncope)
        - ƒê·ªôt t·ª≠ (n·∫øu ti·∫øn tri·ªÉn ‚Üí VF)
        
        **ƒêi·ªÅu tr·ªã c·∫•p c·ª©u TdP:**
        1. **N·∫øu kh√¥ng ·ªïn ƒë·ªãnh huy·∫øt ƒë·ªông:**
           - S·ªëc ƒëi·ªán kh√¥ng ƒë·ªìng b·ªô ngay
           - CPR n·∫øu kh√¥ng c√≥ m·∫°ch
        
        2. **N·∫øu ·ªïn ƒë·ªãnh:**
           - **Magnesium sulfate:** 2g IV trong 15 ph√∫t
           - Ti·∫øp theo: 2-4 mg/ph√∫t infusion
           - Hi·ªáu qu·∫£ ngay c·∫£ khi Mg2+ b√¨nh th∆∞·ªùng
        
        3. **ƒêi·ªÅu ch·ªânh y·∫øu t·ªë nguy c∆°:**
           - D·ª´ng ngay thu·ªëc k√©o d√†i QT
           - ƒêi·ªÅu ch·ªânh K+ > 4.5 mmol/L
           - ƒêi·ªÅu ch·ªânh Mg2+ > 1.0 mmol/L
        
        4. **N·∫øu TdP t√°i ph√°t:**
           - TƒÉng nh·ªãp tim (ngƒÉn pause-dependent TdP):
             + Isoproterenol infusion
             + Pacing t·∫°m th·ªùi (90-110 bpm)
           - Lidocaine (·ª©c ch·∫ø depolarization s·ªõm)
        
        **Ph√≤ng ng·ª´a:**
        - Screening QTc tr∆∞·ªõc khi d√πng thu·ªëc nguy c∆° cao
        - Theo d√µi ƒëi·ªán gi·∫£i ƒë·ªì th∆∞·ªùng xuy√™n
        - Tr√°nh k·∫øt h·ª£p nhi·ªÅu thu·ªëc k√©o d√†i QT
        - Gi·∫£m li·ªÅu ·ªü suy th·∫≠n, suy gan
        """)
    
    with st.expander("üí° Qu·∫£n L√Ω K√©o D√†i QT Do Thu·ªëc"):
        st.markdown("""
        ### Khi ph√°t hi·ªán QTc k√©o d√†i:
        
        **1. ƒê√°nh gi√° ban ƒë·∫ßu:**
        - Xem x√©t t·∫•t c·∫£ thu·ªëc ƒëang d√πng
        - Ki·ªÉm tra ƒëi·ªán gi·∫£i (K+, Mg2+, Ca2+)
        - ƒê√°nh gi√° ch·ª©c nƒÉng th·∫≠n, gan
        - H·ªèi ti·ªÅn s·ª≠ gia ƒë√¨nh LQTS
        
        **2. QTc 470-499 ms:**
        - Xem x√©t d·ª´ng/thay th·∫ø thu·ªëc k√©o d√†i QT
        - ƒêi·ªÅu ch·ªânh ƒëi·ªán gi·∫£i (K+ > 4.0, Mg2+ > 1.0)
        - Gi·∫£m li·ªÅu n·∫øu c·∫ßn thi·∫øt d√πng thu·ªëc
        - Theo d√µi ECG th∆∞·ªùng xuy√™n
        
        **3. QTc ‚â• 500 ms:**
        - **D·ª´ng ngay** thu·ªëc k√©o d√†i QT
        - Nh·∫≠p vi·ªán theo d√µi telemetry
        - ƒêi·ªÅu ch·ªânh t√≠ch c·ª±c K+ > 4.5, Mg2+ > 1.0
        - Tr√°nh nh·ªãp ch·∫≠m (xem x√©t pacing t·∫°m th·ªùi)
        - H·ªôi ch·∫©n tim m·∫°ch
        
        **4. Thay th·∫ø thu·ªëc:**
        
        | Thu·ªëc k√©o d√†i QT | Thay th·∫ø an to√†n h∆°n |
        |------------------|----------------------|
        | Azithromycin | Amoxicillin, Doxycycline |
        | Moxifloxacin | Levofloxacin (li·ªÅu th·∫•p) |
        | Fluconazole | Micafungin, Caspofungin |
        | Haloperidol | Olanzapine, Aripiprazole |
        | Citalopram | Sertraline, Vortioxetine |
        | Domperidone | Metoclopramide |
        | Ondansetron cao | Ondansetron ‚â§ 16mg/ng√†y |
        
        **5. Monitoring:**
        - Baseline ECG tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu thu·ªëc
        - Follow-up ECG:
          + Sau 1-2 tu·∫ßn
          + Khi thay ƒë·ªïi li·ªÅu
          + Khi th√™m thu·ªëc t∆∞∆°ng t√°c
        - Check ƒëi·ªán gi·∫£i n·∫øu c√≥ nguy c∆° (l·ª£i ti·ªÉu, ti√™u ch·∫£y)
        
        **6. Gi√°o d·ª•c b·ªánh nh√¢n:**
        - Tri·ªáu ch·ª©ng c·∫£nh b√°o (ng·∫•t, h·ªìi h·ªôp)
        - Tr√°nh t·ª± √Ω d√πng thu·ªëc OTC
        - Th√¥ng b√°o v·ªõi b√°c sƒ© tr∆∞·ªõc khi d√πng thu·ªëc m·ªõi
        - Website: CredibleMeds.org (ki·ªÉm tra thu·ªëc)
        """)
    
    # References
    st.markdown("---")
    st.caption("""
    **T√†i li·ªáu tham kh·∫£o:**
    - Rautaharju PM, et al. AHA/ACCF/HRS recommendations for QT interval measurement. Circulation. 2009
    - Drew BJ, et al. Prevention of TdP in hospital settings. Circulation. 2010
    - Giudicessi JR, et al. Genotype- and phenotype-guided management of LQTS. Circulation. 2018
    - Al-Khatib SM, et al. What clinicians should know about the QT interval. JAMA. 2003
    - www.CredibleMeds.org - QTdrugs List
    """)


if __name__ == "__main__":
    render()

