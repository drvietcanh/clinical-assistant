"""
GRACE Score Calculator
"""

import streamlit as st


def render():
    """GRACE Score Calculator"""
    st.subheader("üìä GRACE Score")
    st.caption("Ti√™n L∆∞·ª£ng T·ª≠ Vong Trong ACS")
    
    st.info("""
    **GRACE Score** d·ª± ƒëo√°n t·ª≠ vong trong b·ªánh vi·ªán v√† 6 th√°ng sau ACS (STEMI/NSTEMI).
    """)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìã Th√¥ng S·ªë L√¢m S√†ng")
        
        # Age
        age = st.number_input(
            "**Tu·ªïi** (nƒÉm)",
            min_value=20,
            max_value=110,
            value=65,
            step=1,
            key="grace_age"
        )
        
        # Heart rate
        hr = st.number_input(
            "**Nh·ªãp tim** (l·∫ßn/ph√∫t)",
            min_value=30,
            max_value=250,
            value=80,
            step=1,
            key="grace_hr"
        )
        
        # Systolic BP
        sbp = st.number_input(
            "**Huy·∫øt √°p t√¢m thu** (mmHg)",
            min_value=50,
            max_value=250,
            value=120,
            step=1,
            key="grace_sbp"
        )
        
        # Creatinine
        st.markdown("**Creatinine m√°u**")
        scr_unit = st.radio(
            "ƒê∆°n v·ªã:",
            ["mg/dL", "¬µmol/L"],
            horizontal=True,
            key="grace_scr_unit"
        )
        
        if scr_unit == "mg/dL":
            scr_mgdl = st.number_input(
                "Creatinine (mg/dL)",
                min_value=0.1,
                max_value=15.0,
                value=1.0,
                step=0.1,
                key="grace_scr_mgdl"
            )
        else:
            scr_umol = st.number_input(
                "Creatinine (¬µmol/L)",
                min_value=10.0,
                max_value=1500.0,
                value=88.0,
                step=5.0,
                key="grace_scr_umol"
            )
            scr_mgdl = scr_umol / 88.4
        
        # Killip class
        killip = st.selectbox(
            "**Killip Class**",
            [
                "I - Kh√¥ng suy tim",
                "II - S3 ho·∫∑c ran ·∫©m ph·ªïi",
                "III - Ph√π ph·ªïi c·∫•p",
                "IV - Shock tim"
            ],
            key="grace_killip"
        )
        killip_class = int(killip[0])
        
        # Cardiac arrest
        cardiac_arrest = st.checkbox(
            "**Ng·ª´ng tu·∫ßn ho√†n** khi nh·∫≠p vi·ªán",
            key="grace_arrest"
        )
        
        # ST segment deviation
        st_deviation = st.checkbox(
            "**ST ch√™nh** tr√™n ECG",
            help="ST ch√™nh l√™n ho·∫∑c xu·ªëng",
            key="grace_st"
        )
        
        # Elevated cardiac enzymes
        enzymes = st.checkbox(
            "**Enzyme tim tƒÉng** (Troponin/CK-MB)",
            key="grace_enzymes"
        )
        
        if st.button("üßÆ T√≠nh GRACE Score", type="primary", key="grace_calc"):
            # Calculate points for each variable
            points = 0
            details = []
            
            # Age points
            if age < 30:
                age_pts = 0
            elif age <= 39:
                age_pts = 8
            elif age <= 49:
                age_pts = 25
            elif age <= 59:
                age_pts = 41
            elif age <= 69:
                age_pts = 58
            elif age <= 79:
                age_pts = 75
            elif age <= 89:
                age_pts = 91
            else:
                age_pts = 100
            points += age_pts
            details.append(f"Tu·ªïi {age}: {age_pts} ƒëi·ªÉm")
            
            # Heart rate points
            if hr < 50:
                hr_pts = 0
            elif hr <= 69:
                hr_pts = 3
            elif hr <= 89:
                hr_pts = 9
            elif hr <= 109:
                hr_pts = 15
            elif hr <= 149:
                hr_pts = 24
            elif hr <= 199:
                hr_pts = 38
            else:
                hr_pts = 46
            points += hr_pts
            details.append(f"Nh·ªãp tim {hr}: {hr_pts} ƒëi·ªÉm")
            
            # Systolic BP points
            if sbp < 80:
                sbp_pts = 58
            elif sbp <= 99:
                sbp_pts = 53
            elif sbp <= 119:
                sbp_pts = 43
            elif sbp <= 139:
                sbp_pts = 34
            elif sbp <= 159:
                sbp_pts = 24
            elif sbp <= 199:
                sbp_pts = 10
            else:
                sbp_pts = 0
            points += sbp_pts
            details.append(f"HA t√¢m thu {sbp}: {sbp_pts} ƒëi·ªÉm")
            
            # Creatinine points
            if scr_mgdl < 0.4:
                scr_pts = 1
            elif scr_mgdl <= 0.79:
                scr_pts = 4
            elif scr_mgdl <= 1.19:
                scr_pts = 7
            elif scr_mgdl <= 1.59:
                scr_pts = 10
            elif scr_mgdl <= 1.99:
                scr_pts = 13
            elif scr_mgdl <= 3.99:
                scr_pts = 21
            else:
                scr_pts = 28
            points += scr_pts
            details.append(f"Creatinine {scr_mgdl:.2f} mg/dL: {scr_pts} ƒëi·ªÉm")
            
            # Killip class points
            killip_pts = (killip_class - 1) * 15 + (killip_class - 1) * 5 if killip_class > 1 else 0
            if killip_class == 1:
                killip_pts = 0
            elif killip_class == 2:
                killip_pts = 20
            elif killip_class == 3:
                killip_pts = 39
            else:  # Class 4
                killip_pts = 59
            points += killip_pts
            details.append(f"Killip Class {killip_class}: {killip_pts} ƒëi·ªÉm")
            
            # Cardiac arrest points
            if cardiac_arrest:
                points += 39
                details.append("Ng·ª´ng tu·∫ßn ho√†n: 39 ƒëi·ªÉm")
            
            # ST deviation points
            if st_deviation:
                points += 28
                details.append("ST ch√™nh: 28 ƒëi·ªÉm")
            
            # Elevated enzymes points
            if enzymes:
                points += 14
                details.append("Enzyme tƒÉng: 14 ƒëi·ªÉm")
            
            # Risk calculation
            # In-hospital mortality risk
            if points <= 108:
                risk_category = "th·∫•p"
                hospital_mort = "<1%"
                six_month_mort = "<3%"
                color_class = "success"
            elif points <= 140:
                risk_category = "trung b√¨nh"
                hospital_mort = "1-3%"
                six_month_mort = "3-8%"
                color_class = "warning"
            else:
                risk_category = "cao"
                hospital_mort = ">3%"
                six_month_mort = ">8%"
                color_class = "error"
            
            with col2:
                st.markdown("### üìä K·∫øt Qu·∫£")
                
                if color_class == "success":
                    st.success(f"## GRACE = {points}")
                    st.success("‚úÖ Nguy c∆° TH·∫§P")
                elif color_class == "warning":
                    st.warning(f"## GRACE = {points}")
                    st.warning("‚ö†Ô∏è Nguy c∆° TRUNG B√åNH")
                else:
                    st.error(f"## GRACE = {points}")
                    st.error("üö® Nguy c∆° CAO")
            
            st.markdown("### üí° Chi Ti·∫øt ƒêi·ªÉm")
            for d in details:
                st.write(f"- {d}")
            
            st.markdown("---")
            st.markdown("### üìà Nguy C∆° T·ª≠ Vong")
            
            col_m1, col_m2 = st.columns(2)
            with col_m1:
                st.metric(
                    label="T·ª≠ vong trong vi·ªán",
                    value=hospital_mort
                )
            with col_m2:
                st.metric(
                    label="T·ª≠ vong 6 th√°ng",
                    value=six_month_mort
                )
            
            st.markdown("### üíä Khuy·∫øn C√°o X·ª≠ Tr√≠")
            
            if risk_category == "th·∫•p":
                st.success(f"""
                **Nguy c∆° {risk_category.upper()}**
                
                **Chi·∫øn l∆∞·ª£c:**
                - ‚úÖ ƒêi·ªÅu tr·ªã n·ªôi khoa t√≠ch c·ª±c
                - DAPT (Aspirin + P2Y12 inhibitor)
                - Statin, Beta-blocker, ACE-I
                - C√≥ th·ªÉ c√¢n nh·∫Øc xu·∫•t vi·ªán s·ªõm n·∫øu ·ªïn ƒë·ªãnh
                - Theo d√µi ngo·∫°i tr√∫
                - C√¢n nh·∫Øc stress test ho·∫∑c CT angiography
                """)
            
            elif risk_category == "trung b√¨nh":
                st.warning(f"""
                **Nguy c∆° {risk_category.upper()}**
                
                **Chi·∫øn l∆∞·ª£c:**
                - ‚ö†Ô∏è ƒêi·ªÅu tr·ªã t√≠ch c·ª±c
                - DAPT t·ªëi ∆∞u
                - Anticoagulation
                - C√¢n nh·∫Øc chi·∫øn l∆∞·ª£c x√¢m l·∫•n s·ªõm
                - Coronary angiography trong 24-72h
                - H·ªôi ch·∫©n tim m·∫°ch
                - Theo d√µi s√°t t·∫°i b·ªánh vi·ªán
                """)
            
            else:
                st.error(f"""
                **Nguy c∆° {risk_category.upper()}**
                
                **Chi·∫øn l∆∞·ª£c:**
                - üö® ƒêi·ªÅu tr·ªã t√≠ch c·ª±c t·ªëi ƒëa
                - DAPT + Anticoagulation
                - X·ª≠ tr√≠ bi·∫øn ch·ª©ng (suy tim, shock)
                - **Coronary angiography KH·∫®N C·∫§P**
                - Chu·∫©n b·ªã can thi·ªáp/CABG
                - ICU/CCU monitoring
                - H·ªó tr·ª£ tu·∫ßn ho√†n n·∫øu c·∫ßn (IABP, ECMO)
                - H·ªôi ch·∫©n ƒëa chuy√™n khoa
                """)
            
            with st.expander("üìö T√†i Li·ªáu Tham Kh·∫£o"):
                st.markdown("""
                **GRACE (Global Registry of Acute Coronary Events) Risk Score**
                
                **8 Bi·∫øn s·ªë:**
                1. Age (tu·ªïi)
                2. Heart rate (nh·ªãp tim)
                3. Systolic BP (HA t√¢m thu)
                4. Creatinine (creatinine m√°u)
                5. Killip class (ph√¢n lo·∫°i suy tim)
                6. Cardiac arrest at admission (ng·ª´ng tu·∫ßn ho√†n)
                7. ST segment deviation (ST ch√™nh)
                8. Elevated cardiac biomarkers (enzyme tim)
                
                **T·ªïng ƒëi·ªÉm: 1-372**
                
                **Ph√¢n t·∫ßng nguy c∆°:**
                - **‚â§108**: Low risk (<1% in-hospital, <3% 6-month mortality)
                - **109-140**: Intermediate risk (1-3% in-hospital, 3-8% 6-month)
                - **>140**: High risk (>3% in-hospital, >8% 6-month mortality)
                
                **Validation:**
                - GRACE Registry (>100,000 patients)
                - Multiple international validations
                
                **Guidelines:**
                - ESC 2020 ACS Guidelines (Class I recommendation)
                - AHA/ACC Guidelines
                
                **References:**
                - Granger CB et al. Arch Intern Med. 2003;163(19):2345-2353.
                - Fox KAA et al. BMJ. 2006;333(7578):1091.
                
                **Link:**
                - https://www.mdcalc.com/grace-acs-risk-mortality-calculator
                """)
    
    st.markdown("---")
    st.caption("‚ö†Ô∏è C√¥ng c·ª• h·ªó tr·ª£ l√¢m s√†ng - kh√¥ng thay th·∫ø ƒë√°nh gi√° l√¢m s√†ng to√†n di·ªán")
