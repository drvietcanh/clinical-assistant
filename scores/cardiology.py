"""
Cardiology Scoring Systems
All cardiac risk calculators in one module
"""

import streamlit as st


def render_cha2ds2vasc():
    """CHA‚ÇÇDS‚ÇÇ-VASc Score Calculator"""
    st.subheader("‚ù§Ô∏è CHA‚ÇÇDS‚ÇÇ-VASc Score")
    st.caption("ƒê√°nh Gi√° Nguy C∆° ƒê·ªôt Qu·ªµ Trong Rung Nhƒ©")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìã Ti√™u Ch√≠ ƒê√°nh Gi√°")
        
        chf = st.checkbox(
            "**C** - Suy tim sung huy·∫øt / R·ªëi lo·∫°n ch·ª©c nƒÉng th·∫•t tr√°i",
            help="Ti·ªÅn s·ª≠ suy tim ho·∫∑c EF <40%"
        )
        
        htn = st.checkbox(
            "**H** - TƒÉng huy·∫øt √°p",
            help="ƒêang ƒëi·ªÅu tr·ªã tƒÉng huy·∫øt √°p ho·∫∑c BP >140/90 mmHg"
        )
        
        age_group = st.radio(
            "**A** - Tu·ªïi",
            ["< 65 tu·ªïi", "65-74 tu·ªïi", "‚â• 75 tu·ªïi"],
            horizontal=True
        )
        
        dm = st.checkbox(
            "**D** - ƒê√°i th√°o ƒë∆∞·ªùng",
            help="ƒêang ƒëi·ªÅu tr·ªã ho·∫∑c HbA1c ‚â•6.5%"
        )
        
        stroke = st.checkbox(
            "**S** - Ti·ªÅn s·ª≠ ƒê·ªôt qu·ªµ / TIA / Huy·∫øt kh·ªëi",
            help="ƒê·ªôt qu·ªµ, TIA ho·∫∑c t·∫Øc m·∫°ch h·ªá th·ªëng tr∆∞·ªõc ƒë√¢y"
        )
        
        vasc = st.checkbox(
            "**V** - B·ªánh m·∫°ch m√°u",
            help="Nh·ªìi m√°u c∆° tim, b·ªánh ƒë·ªông m·∫°ch ngo·∫°i bi√™n, plaque ƒë·ªông m·∫°ch ch·ªß"
        )
        
        sex = st.radio(
            "**Sc** - Gi·ªõi t√≠nh",
            ["Nam", "N·ªØ"],
            horizontal=True
        )
        
        if st.button("üßÆ T√≠nh ƒêi·ªÉm", type="primary", key="cha2ds2vasc_calc"):
            score = 0
            details = []
            
            if chf:
                score += 1
                details.append("‚úì Suy tim (+1)")
            if htn:
                score += 1
                details.append("‚úì TƒÉng huy·∫øt √°p (+1)")
            if age_group == "65-74 tu·ªïi":
                score += 1
                details.append("‚úì Tu·ªïi 65-74 (+1)")
            elif age_group == "‚â• 75 tu·ªïi":
                score += 2
                details.append("‚úì Tu·ªïi ‚â•75 (+2)")
            if dm:
                score += 1
                details.append("‚úì ƒê√°i th√°o ƒë∆∞·ªùng (+1)")
            if stroke:
                score += 2
                details.append("‚úì Ti·ªÅn s·ª≠ ƒë·ªôt qu·ªµ/TIA (+2)")
            if vasc:
                score += 1
                details.append("‚úì B·ªánh m·∫°ch m√°u (+1)")
            if sex == "N·ªØ":
                score += 1
                details.append("‚úì Gi·ªõi t√≠nh n·ªØ (+1)")
            
            with col2:
                st.markdown("### üìä K·∫øt Qu·∫£")
                
                if score == 0:
                    st.success(f"## CHA‚ÇÇDS‚ÇÇ-VASc = {score}")
                    st.success("‚úÖ Nguy c∆° TH·∫§P")
                    risk = "0-0.2%/nƒÉm"
                elif score == 1:
                    st.warning(f"## CHA‚ÇÇDS‚ÇÇ-VASc = {score}")
                    st.warning("‚ö° Nguy c∆° TRUNG B√åNH")
                    risk = "0.6-2.0%/nƒÉm"
                elif score == 2:
                    st.warning(f"## CHA‚ÇÇDS‚ÇÇ-VASc = {score}")
                    st.warning("‚ö†Ô∏è Nguy c∆° TRUNG B√åNH-CAO")
                    risk = "2.2%/nƒÉm"
                else:
                    st.error(f"## CHA‚ÇÇDS‚ÇÇ-VASc = {score}")
                    st.error("üö® Nguy c∆° CAO")
                    if score <= 5:
                        risk = f"{2.2 + (score-2)*1.5:.1f}%/nƒÉm"
                    else:
                        risk = ">10%/nƒÉm"
            
            st.markdown("### üí° Gi·∫£i Th√≠ch & Khuy·∫øn C√°o")
            st.markdown(f"**Nguy c∆° ƒë·ªôt qu·ªµ h√†ng nƒÉm:** {risk}")
            
            st.markdown("**Chi ti·∫øt ƒëi·ªÉm:**")
            if details:
                for detail in details:
                    st.write(f"- {detail}")
            else:
                st.write("- Kh√¥ng c√≥ y·∫øu t·ªë nguy c∆°")
            
            st.markdown("---")
            st.markdown("### üíä Khuy·∫øn C√°o ƒêi·ªÅu Tr·ªã")
            
            if score == 0 and sex == "Nam":
                st.info("""
                **Kh√¥ng c·∫ßn kh√°ng ƒë√¥ng** (ho·∫∑c c√≥ th·ªÉ d√πng Aspirin)
                - Nguy c∆° ƒë·ªôt qu·ªµ r·∫•t th·∫•p
                - C√¢n nh·∫Øc l·∫°i ƒë·ªãnh k·ª≥
                """)
            elif score == 1 and sex == "Nam":
                st.warning("""
                **C√¢n nh·∫Øc kh√°ng ƒë√¥ng** (∆∞u ti√™n NOAC/Warfarin)
                - Th·∫£o lu·∫≠n v·ªõi b·ªánh nh√¢n v·ªÅ l·ª£i √≠ch/nguy c∆°
                - ƒê√°nh gi√° nguy c∆° ch·∫£y m√°u (HAS-BLED)
                """)
            elif score >= 1:
                st.error("""
                **KHUY·∫æN C√ÅO KH√ÅNG ƒê√îNG** (NOAC ho·∫∑c Warfarin)
                
                **L·ª±a ch·ªçn ∆∞u ti√™n:**
                - **NOAC (Kh√°ng ƒë√¥ng tr·ª±c ti·∫øp):**
                  - Apixaban 5mg x 2 l·∫ßn/ng√†y
                  - Rivaroxaban 20mg x 1 l·∫ßn/ng√†y
                  - Edoxaban 60mg x 1 l·∫ßn/ng√†y
                  - Dabigatran 150mg x 2 l·∫ßn/ng√†y
                
                - **Warfarin:**
                  - M·ª•c ti√™u INR 2.0-3.0
                  - Khi kh√¥ng d√πng ƒë∆∞·ª£c NOAC
                
                **Ch·ªëng ch·ªâ ƒë·ªãnh NOAC:**
                - Suy th·∫≠n n·∫∑ng (CrCl <15-30)
                - B·ªánh van tim n·∫∑ng
                - Thai k·ª≥
                """)
            
            with st.expander("üìö T√†i Li·ªáu Tham Kh·∫£o"):
                st.markdown("""
                **ESC Guidelines 2020 - Atrial Fibrillation**
                
                **C√°ch t√≠nh ƒëi·ªÉm:**
                - **C** = Congestive heart failure/LV dysfunction (+1)
                - **H** = Hypertension (+1)
                - **A‚ÇÇ** = Age ‚â•75 years (+2)
                - **D** = Diabetes mellitus (+1)
                - **S‚ÇÇ** = Prior Stroke/TIA/thromboembolism (+2)
                - **V** = Vascular disease (+1)
                - **A** = Age 65-74 years (+1)
                - **Sc** = Sex category (female) (+1)
                
                **T·ªïng ƒëi·ªÉm:** 0-9
                
                **Validation:**
                - Euro Heart Survey on AF
                - Danish National Patient Registry
                
                **Link:**
                - ESC 2020: https://academic.oup.com/eurheartj/article/42/5/373/5899003
                """)


def render_hasbled():
    """HAS-BLED Score Calculator"""
    st.subheader("ü©∏ HAS-BLED Score")
    st.caption("ƒê√°nh Gi√° Nguy C∆° Ch·∫£y M√°u Khi D√πng Kh√°ng ƒê√¥ng")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìã Ti√™u Ch√≠ ƒê√°nh Gi√°")
        
        htn_uncontrolled = st.checkbox(
            "**H** - TƒÉng huy·∫øt √°p kh√¥ng ki·ªÉm so√°t",
            help="SBP >160 mmHg"
        )
        
        renal = st.checkbox("Ch·ª©c nƒÉng th·∫≠n b·∫•t th∆∞·ªùng", help="L·ªçc c·∫ßu th·∫≠n <60 ho·∫∑c ch·∫°y th·∫≠n")
        liver = st.checkbox("Ch·ª©c nƒÉng gan b·∫•t th∆∞·ªùng", help="X∆° gan ho·∫∑c men gan tƒÉng >2 l·∫ßn")
        
        stroke_bled = st.checkbox(
            "**S** - Ti·ªÅn s·ª≠ ƒë·ªôt qu·ªµ",
            help="ƒê·ªôt qu·ªµ tr∆∞·ªõc ƒë√¢y"
        )
        
        bleeding = st.checkbox(
            "**B** - Ti·ªÅn s·ª≠ ch·∫£y m√°u ho·∫∑c thi·ªÉu m√°u",
            help="Ch·∫£y m√°u n·∫∑ng ho·∫∑c thi·ªÉu m√°u tr∆∞·ªõc ƒë√¢y"
        )
        
        labile_inr = st.checkbox(
            "**L** - INR kh√¥ng ·ªïn ƒë·ªãnh",
            help="TTR <60% n·∫øu d√πng warfarin"
        )
        
        age_hasbled = st.checkbox(
            "**E** - Tu·ªïi cao (>65)",
            help="Tu·ªïi >65"
        )
        
        drugs = st.checkbox("D√πng thu·ªëc ch·ªëng ti·ªÉu c·∫ßu/NSAID", help="Aspirin, NSAID")
        alcohol = st.checkbox("L·∫°m d·ª•ng r∆∞·ª£u", help=">8 ƒë∆°n v·ªã/tu·∫ßn")
        
        if st.button("üßÆ T√≠nh ƒêi·ªÉm HAS-BLED", type="primary", key="hasbled_calc"):
            score = 0
            details = []
            
            if htn_uncontrolled:
                score += 1
                details.append("‚úì THA kh√¥ng ki·ªÉm so√°t (+1)")
            if renal:
                score += 1
                details.append("‚úì Suy th·∫≠n (+1)")
            if liver:
                score += 1
                details.append("‚úì Suy gan (+1)")
            if stroke_bled:
                score += 1
                details.append("‚úì Ti·ªÅn s·ª≠ ƒë·ªôt qu·ªµ (+1)")
            if bleeding:
                score += 1
                details.append("‚úì Ti·ªÅn s·ª≠ ch·∫£y m√°u (+1)")
            if labile_inr:
                score += 1
                details.append("‚úì INR kh√¥ng ·ªïn ƒë·ªãnh (+1)")
            if age_hasbled:
                score += 1
                details.append("‚úì Tu·ªïi >65 (+1)")
            if drugs:
                score += 1
                details.append("‚úì D√πng ch·ªëng ti·ªÉu c·∫ßu/NSAID (+1)")
            if alcohol:
                score += 1
                details.append("‚úì L·∫°m d·ª•ng r∆∞·ª£u (+1)")
            
            with col2:
                st.markdown("### üìä K·∫øt Qu·∫£")
                
                if score <= 2:
                    st.success(f"## HAS-BLED = {score}")
                    st.success("‚úÖ Nguy c∆° ch·∫£y m√°u TH·∫§P")
                elif score == 3:
                    st.warning(f"## HAS-BLED = {score}")
                    st.warning("‚ö†Ô∏è Nguy c∆° TRUNG B√åNH")
                else:
                    st.error(f"## HAS-BLED = {score}")
                    st.error("üö® Nguy c∆° ch·∫£y m√°u CAO")
            
            st.markdown("### üí° Gi·∫£i Th√≠ch")
            
            if details:
                for d in details:
                    st.write(f"- {d}")
            
            st.markdown("---")
            st.markdown("### üíä Khuy·∫øn C√°o")
            
            if score <= 2:
                st.success("""
                **Nguy c∆° ch·∫£y m√°u ch·∫•p nh·∫≠n ƒë∆∞·ª£c**
                - C√≥ th·ªÉ d√πng kh√°ng ƒë√¥ng an to√†n
                - Theo d√µi ƒë·ªãnh k·ª≥
                """)
            elif score == 3:
                st.warning("""
                **C·∫©n th·∫≠n khi d√πng kh√°ng ƒë√¥ng**
                - Ki·ªÉm so√°t c√°c y·∫øu t·ªë nguy c∆° c√≥ th·ªÉ s·ª≠a
                - Theo d√µi s√°t h∆°n
                - C√¢n nh·∫Øc NOAC thay v√¨ warfarin
                """)
            else:
                st.error("""
                **Nguy c∆° ch·∫£y m√°u cao - Th·∫≠n tr·ªçng!**
                
                **KH√îNG PH·∫¢I CH·ªêNG CH·ªà ƒê·ªäNH kh√°ng ƒë√¥ng!**
                
                **C·∫ßn l√†m:**
                - Ki·ªÉm so√°t THA t·ªët h∆°n
                - Ng·ª´ng NSAID/aspirin n·∫øu ƒë∆∞·ª£c
                - Gi·∫£m r∆∞·ª£u
                - C√¢n nh·∫Øc d√πng PPI b·∫£o v·ªá d·∫° d√†y
                - ∆Øu ti√™n NOAC h∆°n warfarin
                - Theo d√µi s√°t sao
                """)
            
            with st.expander("üìö T√†i Li·ªáu Tham Kh·∫£o"):
                st.markdown("""
                **HAS-BLED Score**
                
                **Ti√™u ch√≠ (1 ƒëi·ªÉm m·ªói m·ª•c):**
                - **H**: Hypertension (SBP >160 mmHg)
                - **A**: Abnormal renal/liver function (1-2 ƒëi·ªÉm)
                - **S**: Stroke (ti·ªÅn s·ª≠ ƒë·ªôt qu·ªµ)
                - **B**: Bleeding history/predisposition
                - **L**: Labile INR (TTR <60%)
                - **E**: Elderly (>65 tu·ªïi)
                - **D**: Drugs (antiplatelet/NSAID) or Alcohol
                
                **Gi·∫£i th√≠ch:**
                - 0-2: Nguy c∆° ch·∫£y m√°u th·∫•p
                - ‚â•3: Nguy c∆° cao (c·∫ßn th·∫≠n tr·ªçng, KH√îNG ch·ªëng ch·ªâ ƒë·ªãnh)
                
                **Reference:**
                Pisters R, et al. Chest. 2010;138(5):1093-1100.
                """)


def render_score2():
    """SCORE2 Calculator"""
    st.subheader("üìä SCORE2 - ESC 2021")
    st.caption("ƒê√°nh Gi√° Nguy C∆° B·ªánh Tim M·∫°ch 10 NƒÉm (40-69 tu·ªïi)")
    
    st.info("""
    **SCORE2 d·ª± ƒëo√°n nguy c∆° 10 nƒÉm m·∫Øc:**
    - Nh·ªìi m√°u c∆° tim (t·ª≠ vong + kh√¥ng t·ª≠ vong)
    - ƒê·ªôt qu·ªµ (t·ª≠ vong + kh√¥ng t·ª≠ vong)
    """)
    
    st.warning("üöß **ƒêang ph√°t tri·ªÉn** - S·∫Ω s·ªõm ho√†n th√†nh v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng chuy·ªÉn ƒë·ªïi ƒë∆°n v·ªã!")


def render_score2_op():
    """SCORE2-OP Calculator"""
    st.subheader("üë¥ SCORE2-OP - ESC 2021")
    st.caption("ƒê√°nh Gi√° Nguy C∆° Tim M·∫°ch ·ªû Ng∆∞·ªùi Cao Tu·ªïi (‚â•70 tu·ªïi)")
    
    st.info("""
    **SCORE2-OP (Older Persons) d√†nh cho ng∆∞·ªùi ‚â•70 tu·ªïi**
    
    D·ª± ƒëo√°n nguy c∆° 5-10 nƒÉm m·∫Øc b·ªánh tim m·∫°ch.
    """)
    
    st.warning("üöß **ƒêang ph√°t tri·ªÉn** - S·∫Ω s·ªõm ho√†n th√†nh!")


def render_heart_score():
    """HEART Score Calculator"""
    st.subheader("‚ù§Ô∏è HEART Score")
    st.caption("ƒê√°nh Gi√° Nguy C∆° ACS Trong ƒêau Ng·ª±c C·∫•p")
    
    st.warning("üöß **ƒêang ph√°t tri·ªÉn** - D·ª± ki·∫øn ho√†n th√†nh: Tu·∫ßn 2-3")
    
    st.info("""
    **HEART Score** ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.
    
    S·∫Ω s·ªõm ra m·∫Øt v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng!
    """)


def render_timi_risk():
    """TIMI Risk Score Calculator"""
    st.subheader("üíî TIMI Risk Score")
    st.caption("ƒê√°nh Gi√° Nguy C∆° Trong ACS")
    
    st.warning("üöß **ƒêang ph√°t tri·ªÉn** - D·ª± ki·∫øn ho√†n th√†nh: Tu·∫ßn 2-3")


def render_grace_score():
    """GRACE Score Calculator"""
    st.subheader("üìä GRACE Score")
    st.caption("Ti√™n L∆∞·ª£ng ACS")
    
    st.warning("üöß **ƒêang ph√°t tri·ªÉn** - D·ª± ki·∫øn ho√†n th√†nh: Tu·∫ßn 3")


def render_framingham():
    """Framingham Risk Score Calculator"""
    st.subheader("üìà Framingham Risk Score")
    st.caption("Nguy C∆° Tim M·∫°ch 10 NƒÉm")
    
    st.warning("üöß **ƒêang ph√°t tri·ªÉn** - D·ª± ki·∫øn ho√†n th√†nh: Tu·∫ßn 3")


# Router function to call the appropriate calculator
def render_cardiology_calculator(calculator_id):
    """
    Route to the correct cardiology calculator based on ID
    
    Args:
        calculator_id: The ID of the calculator to render
    """
    calculators = {
        "CHA2DS2-VASc": render_cha2ds2vasc,
        "HAS-BLED": render_hasbled,
        "SCORE2": render_score2,
        "SCORE2-OP": render_score2_op,
        "HEART Score": render_heart_score,
        "TIMI Risk": render_timi_risk,
        "GRACE Score": render_grace_score,
        "Framingham": render_framingham,
    }
    
    calculator_func = calculators.get(calculator_id)
    if calculator_func:
        calculator_func()
    else:
        st.error(f"Calculator '{calculator_id}' not found!")

